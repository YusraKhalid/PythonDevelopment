declare module 'react-yt/index' {
	/// <reference types="react" />
	/// <reference types="youtube" />
	import * as React from 'react';
	/**
	 * The YT.ListType provided by the community looks to have a typo in the "playlist" value.
	 * Accodring to the docs (https://developers.google.com/youtube/player_parameters?hl=pl#listtype)
	 * the correct value is "playlist" not "player" *
	 */
	export enum ListType {
	    search = "search",
	    userUploads = "user_uploads",
	    playlist = "playlist",
	}
	export type RenderFunction = {
	    (params: {
	        iframe: JSX.Element;
	        player: YT.Player;
	        loadVideoById(videoId: string, startSeconds?: number, suggestedQuality?: YT.SuggestedVideoQuality): void;
	        cueVideoById(videoId: string, startSeconds?: number, suggestedQuality?: YT.SuggestedVideoQuality): void;
	        loadVideoByUrl(mediaContentUrl: string, startSeconds?: number, suggestedQuality?: YT.SuggestedVideoQuality): void;
	        loadPlaylist(playlist: string | string[], index?: number, startSeconds?: number, suggestedQuality?: YT.SuggestedVideoQuality): void;
	        cuePlaylist(playlist: string | string[], index?: number, startSeconds?: number, suggestedQuality?: YT.SuggestedVideoQuality): void;
	        pauseVideo(): void;
	        playVideo(): void;
	        mute(): void;
	        unMute(): void;
	        isMuted(): boolean;
	        setVolume(volume: number): void;
	        getVolume(): number;
	        stopVideo(): void;
	        clearVideo(): void;
	        nextVideo(): void;
	        previousVideo(): void;
	        playVideoAt(index: number): void;
	        seekTo(seconds: number, allowSeekAhead: boolean): void;
	        getPlaybackRate(): number;
	        setPlaybackRate(suggestedRate: number): void;
	        getAvailablePlaybackRates(): number[];
	        setLoop(loop: boolean): void;
	        setShuffle(shuffle: boolean): void;
	        getPlayerState(): YT.PlayerState;
	        getCurrentTime(): number;
	        getPlaybackQuality(): YT.SuggestedVideoQuality;
	        setPlaybackQuality(suggestedQuality: YT.SuggestedVideoQuality): void;
	        getVideoLoadedFraction(): number;
	        getDuration(): number;
	        getVideoUrl(): string;
	        getVideoEmbedCode(): string;
	        getPlaylist(): string[];
	        getPlaylistIndex(): number;
	        addEventListener<TEvent extends YT.PlayerEvent>(eventName: keyof YT.Events, listener: (event: TEvent) => void): void;
	        removeEventListener<TEvent extends YT.PlayerEvent>(eventName: keyof YT.Events, listener: (event: TEvent) => void): void;
	    }): React.ReactNode;
	};
	export type GetPlaylistFunction = {
	    (): Array<string>;
	};
	export type YoutubeProps = {
	    autoplay?: YT.AutoPlay;
	    ccLoadPolicy?: YT.ClosedCaptionsLoadPolicy;
	    color?: YT.ProgressBarColor;
	    controls?: YT.Controls;
	    disablekb?: YT.KeyboardControls;
	    enableJsApi?: YT.JsApi;
	    end?: number;
	    fs?: YT.FullscreenButton;
	    hl?: string;
	    ivLoadPolicy?: YT.IvLoadPolicy;
	    list?: string;
	    listType?: ListType;
	    loop?: YT.Loop;
	    modestbranding?: YT.ModestBranding;
	    origin?: string;
	    playlist?: string;
	    playsinline?: YT.PlaysInline;
	    rel?: YT.RelatedVideos;
	    showinfo?: YT.ShowInfo;
	    start?: number;
	    videoId?: string;
	    render?: RenderFunction;
	    events?: {
	        onReady?: YT.PlayerEventHandler<YT.PlayerEvent>;
	        onStateChange?: YT.PlayerEventHandler<YT.OnStateChangeEvent>;
	        onPlaybackQualityChange?: YT.PlayerEventHandler<YT.OnPlaybackQualityChangeEvent>;
	        onPlaybackRateChange?: YT.PlayerEventHandler<YT.OnPlaybackRateChangeEvent>;
	        onError?: YT.PlayerEventHandler<YT.OnErrorEvent>;
	        onApiChange?: YT.PlayerEventHandler<YT.PlayerEvent>;
	    };
	};
	export type YoutubeState = {
	    playerName: string;
	    isMuted: boolean;
	    volume: number;
	    availablePlaybackRates: Array<number>;
	    playbackRate: number;
	    playbackQuality: YT.SuggestedVideoQuality;
	    currentTime: number;
	    duration: number;
	    videoUrl: string;
	    videoEmbedCode: string;
	    playerState: number;
	    playlist: Array<string>;
	    playlistIndex: number;
	    videoLoadedFraction: number;
	};
	export default class YoutubePlayer extends React.Component<YoutubeProps, YoutubeState> {
	    static loadPromise: Promise<boolean>;
	    state: YoutubeState;
	    player: YT.Player;
	    syncInterval: number;
	    callbackObject: {
	        iframe: JSX.Element;
	        loadVideoById: (videoId: string, start: number, quality: "default" | "small" | "medium" | "large" | "hd720" | "hd1080" | "highres") => void;
	        cueVideoById: (videoId: string, start: number, quality: "default" | "small" | "medium" | "large" | "hd720" | "hd1080" | "highres") => void;
	        loadVideoByUrl: (videoUrl: string, start: number, quality: "default" | "small" | "medium" | "large" | "hd720" | "hd1080" | "highres") => void;
	        cueVideoByUrl: (videoId: string, start: number, quality: "default" | "small" | "medium" | "large" | "hd720" | "hd1080" | "highres") => void;
	        loadPlaylist: (playlistIdOrItems: string | string[], index: number, start: number, quality: "default" | "small" | "medium" | "large" | "hd720" | "hd1080" | "highres") => void;
	        cuePlaylist: (playlistId: string | string[], index: number, start: number, quality: "default" | "small" | "medium" | "large" | "hd720" | "hd1080" | "highres") => void;
	        pauseVideo: () => any;
	        playVideo: () => any;
	        stopVideo: () => any;
	        clearVideo: () => any;
	        nextVideo: () => any;
	        previousVideo: () => any;
	        playVideoAt: (index: number) => any;
	        seekTo: (seekTo: number, allowSeek: boolean) => any;
	        mute: () => void;
	        unMute: () => void;
	        isMuted: () => boolean;
	        setVolume: (volume: number) => void;
	        getVolume: () => number;
	        getPlaybackRate: () => number;
	        setPlaybackRate: (rate: number) => void;
	        getAvailablePlaybackRates: () => number[];
	        setLoop: (loop: boolean) => any;
	        setShuffle: (shuffle: boolean) => any;
	        getVideoLoadedFraction: () => number;
	        getPlayerState: () => number;
	        getCurrentTime: () => number;
	        getPlaybackQuality: () => "default" | "small" | "medium" | "large" | "hd720" | "hd1080" | "highres";
	        setPlaybackQuality: (quality: "default" | "small" | "medium" | "large" | "hd720" | "hd1080" | "highres") => void;
	        getDuration: () => number;
	        getVideoUrl: () => string;
	        getVideoEmbedCode: () => string;
	        getPlaylist: () => string[] | (ListType.playlist & any[]);
	        getPlaylistIndex: () => number;
	        addEventListener: (event: string, listener: Function) => any;
	        removeEventListener: (event: string, listener: Function) => any;
	        player: YT.Player;
	    };
	    getPlayerVars(): {
	        [s: string]: number | string | Array<string>;
	    };
	    proxyToPlayer: (functionName: string, data?: (string | number | boolean | Function | string[] | {
	        [s: string]: React.ReactText;
	    })[]) => any;
	    componentWillReceiveProps(nextProps: YoutubeProps): void;
	    render(): {} | null | undefined;
	    callEventIfBound: (eventName: string, eventData: YT.PlayerEvent) => void;
	    /**
	     * Since we are using render props we would not have the data for selected
	     * state of the player updated in realtime. Instead we need to persist this sort
	     * of data in component state.
	     *
	     * The data is then synced:
	     *
	     * - in an interval assuming the video is playing
	     * - in response to specific user interaction
	     * - in response to player event
	     */
	    sync: () => void;
	    startSync: () => void;
	    stopSync: () => void;
	    handleReady: (data: YT.PlayerEvent) => void;
	    handleStateChange: (data: YT.OnStateChangeEvent) => void;
	    handlePlaybackQualityChange: (data: YT.OnPlaybackQualityChangeEvent) => void;
	    handlePlaybackRateChange: (data: YT.OnPlaybackRateChangeEvent) => void;
	    handleError: (data: YT.OnErrorEvent) => void;
	    handleApiChange: (data: YT.PlayerEvent) => void;
	    initPlayer: () => void;
	    componentDidMount(): void;
	    componentWillUnmount(): void;
	}

}
declare module 'react-yt' {
	import main = require('react-yt/index');
	export = main;
}
