import scrapy
from scrapy.http import FormRequest
from scrapy.loader import ItemLoader
from FindADoctor.items import FindadoctorItem
from datetime import datetime

class DoctorSpider(scrapy.Spider):
    name = "doctor"
    start_urls = ["https://www.nwh.org/find-a-doctor/ContentPage.aspx?nd=847&type=1"]

    def parse(self, response):
        url = "https://www.nwh.org/find-a-doctor/ContentPage.aspx?nd=847&type=1"
        viewstate = '/wEPDwUENTM4MQ8WAh4TVmFsaWRhdGVSZXF1ZXN0TW9kZQIBFgJmD2QWBAIBD2QWAmYPZBYCAhMPFgIeBFRleHQFngU8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+DQogIHZhciBfZ2FxID0gX2dhcSB8fCBbXTsNCiBfZ2FxLnB1c2goDQogICAgICBbJ19zZXRBY2NvdW50JywgJ1VBLTIyNzQyNDkwLTEnXSwNCiAgICAgIFsnX3RyYWNrRG93bmxvYWQnXSwNCiAgICAgIFsnX3RyYWNrT3V0Ym91bmQnXSwgDQogICAgICBbJ190cmFja01haWxUbyddLA0KICAgICAgWydfdHJhY2tSZWFsQm91bmNlJ10sDQogICAgICBbJ190cmFja1BhZ2V2aWV3J10sDQogICAgICBbJ3QyLl9zZXRBY2NvdW50JywgJ1VBLTcxNDMzMC0yMCddLA0KICAgICAgWyd0Mi5fdHJhY2tQYWdldmlldyddDQogICAgICApOw0KICAoZnVuY3Rpb24oKSB7DQogICAgdmFyIGdhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7IGdhLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsgZ2EuYXN5bmMgPSB0cnVlOw0KICAgIGdhLnNyYyA9ICgnaHR0cHM6JyA9PSBkb2N1bWVudC5sb2NhdGlvbi5wcm90b2NvbCA/ICdodHRwczovL3NzbCcgOiAnaHR0cDovL3d3dycpICsgJy5nb29nbGUtYW5hbHl0aWNzLmNvbS9nYS5qcyc7DQogICAgdmFyIHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07IHMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZ2EsIHMpOw0KICB9KSgpOw0KPC9zY3JpcHQ+ZAIDD2QWCgIDD2QWAgIBD2QWAmYPZBYCAgEPZBYIAgEPDxYCHwFlZGQCAw8PFgIfAWVkZAIFDw8WAh8BZWRkAgkPDxYCHgtOYXZpZ2F0ZVVybAUeL2FkbWluL2NvbnRlbnRwYWdlLmFzcHg/bmQ9ODQ3ZGQCBQ9kFkoCAQ9kFgQCAQ8WAh8BBRVDdXJyZW50bHkgVW5hdmFpbGFibGVkAgMPFgIfAQUVQ3VycmVudGx5IFVuYXZhaWxhYmxlZAIDDxYCHgtfIUl0ZW1Db3VudAIFFgpmD2QWAmYPFQIYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9MjgxCEFib3V0IFVzZAIBD2QWAmYPFQIYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NjM3B0NhcmVlcnNkAgIPZBYCZg8VAhgvQ29udGVudFBhZ2UuYXNweD9uZD03MDcRTWVkaWNhbCBFZHVjYXRpb25kAgMPZBYCZg8VAhgvQ29udGVudFBhZ2UuYXNweD9uZD04MDQKRG9uYXRlIE5vd2QCBA9kFgJmDxUCGC9Db250ZW50UGFnZS5hc3B4P25kPTkxOQpDb250YWN0IFVzZAIFD2QWCGYPFgQfAWUeB1Zpc2libGVoZAICDxYEHwMCDB8EZxYYZg9kFgJmDxUDGC9jb250ZW50cGFnZS5hc3B4P25kPTYzOAAPQXBwbHkgZm9yIGEgSm9iZAIBD2QWAmYPFQMYL2NvbnRlbnRwYWdlLmFzcHg/bmQ9ODcwABFCaWxsaW5nIFF1ZXN0aW9uc2QCAg9kFgJmDxUDGC9jb250ZW50cGFnZS5hc3B4P25kPTkxOQAKQ29udGFjdCBVc2QCAw9kFgJmDxUDGC9Db250ZW50UGFnZS5hc3B4P25kPTg3NAAKRGlyZWN0aW9uc2QCBA9kFgJmDxUDGC9Db250ZW50UGFnZS5hc3B4P25kPTgwNAAGRG9uYXRlZAIFD2QWAmYPFQMYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9ODQ3AA1GaW5kIGEgRG9jdG9yZAIGD2QWAmYPFQMYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9ODczAA9NZWRpY2FsIFJlY29yZHNkAgcPZBYCZg8VAxgvQ29udGVudFBhZ2UuYXNweD9uZD04NzkACk5ld3NsZXR0ZXJkAggPZBYCZg8VAytodHRwczovL3BhdGllbnRnYXRld2F5LnBhcnRuZXJzLm9yZy9wdWJsaWMvBl9ibGFuaxhQYXJ0bmVycyBQYXRpZW50IEdhdGV3YXlkAgkPZBYCZg8VAxgvQ29udGVudFBhZ2UuYXNweD9uZD02MjQAE1BsYW5uaW5nIFlvdXIgVmlzaXRkAgoPZBYCZg8VAxkvY29udGVudHBhZ2UuYXNweD9uZD0xMTM0ABBQcmUtUmVnaXN0cmF0aW9uZAILD2QWAmYPFQMYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NjcwAAlWb2x1bnRlZXJkAgYPD2QPEBYBZhYBFgIeDlBhcmFtZXRlclZhbHVlZBYBAgNkZAIIDw9kDxAWAWYWARYCHwVkFgECA2RkAg0PZBYCAgEPZBYEAgEPEA8WAh4LXyFEYXRhQm91bmRnZBAVrAEAFEFkZGljdGlvbiBQc3ljaGlhdHJ5E0Fkb2xlc2NlbnQgTWVkaWNpbmUiQWR1bHQgJiBQZWRpLiBBbGxlcmd5ICYgSW1tdW5vbG9neRhBZHVsdCBJbnBhdGllbnQgTWVkaWNpbmUUQWxsZXJneSAmIEltbXVub2xvZ3kWQWxsZXJneSBhbmQgSW1tdW5vbG9neSdBbmF0b21pYyBQYXRob2xvZ3kgJiBDbGluaWNhbCBQYXRob2xvZ3kOQW5lc3RoZXNpb2xvZ3keQW5naW9ncmFwaHkgJiBJbnRlcnZlbnRpb24gUmFkFUJlaGF2aW9yYWwgUGVkaWF0cmljcwpDYXJkaW9sb2d5FkNhcmRpb3Zhc2N1bGFyIERpc2Vhc2UbQ2VydC5SZWcuIE51cnNlIEFuZXN0aGV0aXN0F0NlcnRpZmllZCBOdXJzZSBNaWR3aWZlHENlcnRpZmllZCBOdXJzZSBQcmFjdGl0aW9uZXIXQ2hpbGQgJiBBZG9sZXNjZW50IFBzeS4fQ2hpbGQgYW5kIEFkb2xlc2NlbnQgUHN5Y2hpYXRyeR1DbGluaWNhbCBCaW9jaGVtaWNhbCBHZW5ldGljcyJDbGluaWNhbCBDYXJkaWFjIEVsZWN0cm9waHlzaW9sb2d5HkNsaW5pY2FsIEdlbmV0aWNzIGFuZCBHZW5vbWljcxRDbGluaWNhbCBJbmZvcm1hdGljcxhDbGluaWNhbCBOZXVyb3BoeXNpb2xvZ3kQQ2xuaWNhbCBHZW5ldGljcxhDb2xvbiBhbmQgUmVjdGFsIFN1cmdlcnkWQ3JpdGljYWwgQ2FyZSBNZWRpY2luZQ1DeXRvcGF0aG9sb2d5C0Rlcm1hdG9sb2d5EERlcm1hdG9wYXRob2xvZ3kjRGV2ZWxvcG1lbnRhbC1CZWhhdmlvcmFsIFBlZGlhdHJpY3MURGlhZ25vc3RpYyBSYWRpb2xvZ3kSRW1lcmdlbmN5IE1lZGljaW5lDUVuZG9jcmlub2xvZ3kmRW5kb2NyaW5vbG9neSwgRGlhYmV0ZXMgYW5kIE1ldGFib2xpc20WRW5kb2NyaW5vbG9neS9EaWFiZXRlcwhFcGlsZXBzeQ9GYW1pbHkgTWVkaWNpbmUxRmVtYWxlIFBlbHZpYyBNZWRpY2luZSBhbmQgUmVjb25zdHJ1Y3RpdmUgU3VyZ2VyeRZGb290IGFuZCBBbmtsZSBTdXJnZXJ5E0ZvcmVuc2ljIFBzeWNoaWF0cnkQR2FzdHJvZW50ZXJvbG9neRlHZW5lcmFsIEludGVybmFsIE1lZGljaW5lD0dlbmVyYWwgU3VyZ2VyeQhHZW5ldGljcxJHZXJpYXRyaWMgTWVkaWNpbmUUR2VyaWF0cmljIFBzeWNoaWF0cnkUR3luZWNvbG9naWMgT25jb2xvZ3kKR3luZWNvbG9neQxIYW5kIFN1cmdlcnkVSGVhZCBhbmQgTmVjayBTdXJnZXJ5CkhlbWF0b2xvZ3kfSG9zcGljZSBhbmQgUGFsbGlhdGl2ZSBNZWRpY2luZRlJLk0uIC0gUHVsbW9uYXJ5IERpc2Vhc2VzCUlDVSBDb3ZlchJJbmZlY3Rpb3VzIERpc2Vhc2UcSW50ZXJuYWwgTWVkIC0gQ3JpdGljYWwgQ2FyZRFJbnRlcm5hbCBNZWRpY2luZRlJbnRlcnZlbnRpb25hbCBDYXJkaW9sb2d5GEludGVydmVudGlvbmFsIFJhZGlvbG9neR1MaWMuIEluZGVwLiBDbGluLiBTb2MuIFdvcmtlchdNYXRlcm5hbC9GZXRhbCBNZWRpY2luZRdNYXRlcm5hbC1GZXRhbCBNZWRpY2luZRBNZWRpY2FsIE9uY29sb2d5Ek1lZGljYWwgVG94aWNvbG9neQhNZWRpY2luZRtOZW9uYXRhbC1QZXJpbmF0YWwgTWVkaWNpbmULTmVvbmF0b2xvZ3kKTmVwaHJvbG9neR9OZXVyb2RldmVsb3BtZW50YWwgRGlzYWJpbGl0aWVzFE5ldXJvbG9naWNhbCBTdXJnZXJ5CU5ldXJvbG9neThOZXVyb2xvZ3kgd2l0aCBTcGVjaWFsIFF1YWxpZmljYXRpb25zIGluIENoaWxkIE5ldXJvbG9neRZOZXVyb211c2N1bGFyIE1lZGljaW5lE05ldXJvcGh5c2lvIE1vbml0b3IOTmV1cm9yYWRpb2xvZ3kMTmV1cm9zdXJnZXJ5EE51Y2xlYXIgTWVkaWNpbmURTnVjbGVhciBSYWRpb2xvZ3kTTnVyc2UgUHJhY3RpdGlvbmVycwdOdXJzaW5nF09ic3RldHJpY3MgLSBHeW5lY29sb2d5F09ic3RldHJpY3MgJiBHeW5lY29sb2d5FU9jY3VwYXRpb25hbCBNZWRpY2luZRNPbmNvbG9neS9IZW1hdG9sb2d5DU9waHRoYWxtb2xvZ3kaT3JhbCAmIE1heGlsbG9mYWNpYWwgU3VyZy4cT3JhbCAmIE1heGlsbG9mYWNpYWwgU3VyZ2VyeRtPcnRob3BhZWRpYyBTcG9ydHMgTWVkaWNpbmUTT3J0aG9wYWVkaWMgU3VyZ2VyeQxPcnRob3BhZWRpY3MOT3RvbGFyeW5nb2xvZ3kPUGFpbiBNYW5hZ2VtZW50DVBhaW4gTWVkaWNpbmUeUGFpbiBNZWRpY2luZSAtIEFuZXN0aGVzaW9sb2d5FFBhaW4gTWVkaWNpbmUgLSBQTSZSD1BhbGxpYXRpdmUgQ2FyZQlQYXRob2xvZ3kZUGF0aG9sb2d5IFJlY2VydGlmaWNhdGlvbhJQYXRob2xvZ3ktQW5hdG9taWMUUGF0aG9sb2d5LUhlbWF0b2xvZ3kUUGVkaSAmIEFkdWx0IEFsbGVyZ3kZUEVESS4gSEVNQVRPTE9HWS1PTkNPTE9HWRFQZWRpYXRyaWMgQWxsZXJneSBQZWRpYXRyaWMgQWxsZXJneSBhbmQgSW1tdW5vbG9neRhQZWRpYXRyaWMgQW5lc3RoZXNpb2xvZ3kUUGVkaWF0cmljIENhcmRpb2xvZ3kgUGVkaWF0cmljIENyaXRpY2FsIENhcmUgTWVkaWNpbmUVUGVkaWF0cmljIERlcm1hdG9sb2d5E1BlZGlhdHJpYyBFbWVyZ2VuY3kcUGVkaWF0cmljIEVtZXJnZW5jeSBNZWRpY2luZRdQZWRpYXRyaWMgRW5kb2NyaW5vbG9neRpQZWRpYXRyaWMgR2FzdHJvZW50ZXJvbG9neR1QZWRpYXRyaWMgSGVtYXRvbG9neS9PbmNvbG9neR1QZWRpYXRyaWMgSGVtYXRvbG9neS1PbmNvbG9neRVQZWRpYXRyaWMgSG9zcGl0YWxpc3QcUGVkaWF0cmljIEluZmVjdGlvdXMgRGlzZWFzZR1QZWRpYXRyaWMgSW5mZWN0aW91cyBEaXNlYXNlcxRQZWRpYXRyaWMgTmVwaHJvbG9neRNQZWRpYXRyaWMgTmV1cm9sb2d5F1BlZGlhdHJpYyBPcGh0aGFsbW9sb2d5FlBlZGlhdHJpYyBPcnRob3BhZWRpY3MYUGVkaWF0cmljIE90b2xhcnluZ29sb2d5FVBlZGlhdHJpYyBQdWxtb25vbG9neRNQZWRpYXRyaWMgUmFkaW9sb2d5FlBlZGlhdHJpYyBSaGV1bWF0b2xvZ3kRUGVkaWF0cmljIFN1cmdlcnkRUGVkaWF0cmljIFVyb2xvZ3kKUGVkaWF0cmljcx5QZWRpYXRyaWNzIEhlbWF0b2xvZ3kvT25jb2xvZ3keUGVkaWF0cmljcy9BZG9sZXNjZW50IE1lZGljaW5lE1BlZGlhdHJpY3MvR2VuZXRpY3MKUGhhcm1hY2lzdBZQaHlzaWNhbCBNZWQuICYgUmVoYWIuGVBoeXNpY2FsIE1lZGljaW5lICYgUmVoYWIiUGh5c2ljYWwgTWVkaWNpbmUgJiBSZWhhYmlsaXRhdGlvbiRQaHlzaWNhbCBNZWRpY2luZSBhbmQgUmVoYWJpbGl0YXRpb24TUGh5c2ljaWFuIEFzc2lzdGFudA9QbGFzdGljIFN1cmdlcnkIUG9kaWF0cnkMUHJpbWFyeSBDYXJlDlByb3N0aG9kb250aWNzClBzeWNoaWF0cnkWUHN5Y2hpYXRyeSAmIE5ldXJvbG9neQpQc3ljaG9sb2d5K1B1YmxpYyBIZWFsdGggJiBHZW5lcmFsIFByZXZlbnRpdmUgTWVkaWNpbmUtUHVibGljIEhlYWx0aCBhbmQgR2VuZXJhbCBQcmV2ZW50aXZlIE1lZGljaW5lEVB1bG1vbmFyeSBEaXNlYXNlElJhZGlhdGlvbiBPbmNvbG9neQlSYWRpb2xvZ3kTUmFkaW9sb2d5IEFzc2lzdGFudBpSZXByb2R1Y3RpdmUgRW5kb2NyaW5vbG9neSZSZXByb2R1Y3RpdmUgRW5kb2NyaW5vbG9neS9JbmZlcnRpbGl0eQxSaGV1bWF0b2xvZ3kOU2xlZXAgTWVkaWNpbmUFU3BpbmUPU3BvcnRzIE1lZGljaW5lB1N1cmdlcnkTU3VyZ2VyeSBvZiB0aGUgSGFuZBZTdXJnaWNhbCBDcml0aWNhbCBDYXJlEVN1cmdpY2FsIE9uY29sb2d5DFRlbGVtZWRpY2luZRVUSEVSQVBFVVRJQyBSQURJT0xPR1kcVGhvcmFjaWMgYW5kIENhcmRpYWMgU3VyZ2VyeRBUaG9yYWNpYyBTdXJnZXJ5ElVyZ2VudCBDYXJlIENlbnRlcg1Vcm9neW5lY29sb2d5B1Vyb2xvZ3klVmFzY3VsYXIgYW5kIEludGVydmVudGlvbmFsIFJhZGlvbG9neRFWYXNjdWxhciBNZWRpY2luZRJWYXNjdWxhciBOZXVyb2xvZ3kQVmFzY3VsYXIgU3VyZ2VyeQpXb3VuZCBDYXJlFawBABRBZGRpY3Rpb24gUHN5Y2hpYXRyeRNBZG9sZXNjZW50IE1lZGljaW5lIkFkdWx0ICYgUGVkaS4gQWxsZXJneSAmIEltbXVub2xvZ3kYQWR1bHQgSW5wYXRpZW50IE1lZGljaW5lFEFsbGVyZ3kgJiBJbW11bm9sb2d5FkFsbGVyZ3kgYW5kIEltbXVub2xvZ3knQW5hdG9taWMgUGF0aG9sb2d5ICYgQ2xpbmljYWwgUGF0aG9sb2d5DkFuZXN0aGVzaW9sb2d5HkFuZ2lvZ3JhcGh5ICYgSW50ZXJ2ZW50aW9uIFJhZBVCZWhhdmlvcmFsIFBlZGlhdHJpY3MKQ2FyZGlvbG9neRZDYXJkaW92YXNjdWxhciBEaXNlYXNlG0NlcnQuUmVnLiBOdXJzZSBBbmVzdGhldGlzdBdDZXJ0aWZpZWQgTnVyc2UgTWlkd2lmZRxDZXJ0aWZpZWQgTnVyc2UgUHJhY3RpdGlvbmVyF0NoaWxkICYgQWRvbGVzY2VudCBQc3kuH0NoaWxkIGFuZCBBZG9sZXNjZW50IFBzeWNoaWF0cnkdQ2xpbmljYWwgQmlvY2hlbWljYWwgR2VuZXRpY3MiQ2xpbmljYWwgQ2FyZGlhYyBFbGVjdHJvcGh5c2lvbG9neR5DbGluaWNhbCBHZW5ldGljcyBhbmQgR2Vub21pY3MUQ2xpbmljYWwgSW5mb3JtYXRpY3MYQ2xpbmljYWwgTmV1cm9waHlzaW9sb2d5EENsbmljYWwgR2VuZXRpY3MYQ29sb24gYW5kIFJlY3RhbCBTdXJnZXJ5FkNyaXRpY2FsIENhcmUgTWVkaWNpbmUNQ3l0b3BhdGhvbG9neQtEZXJtYXRvbG9neRBEZXJtYXRvcGF0aG9sb2d5I0RldmVsb3BtZW50YWwtQmVoYXZpb3JhbCBQZWRpYXRyaWNzFERpYWdub3N0aWMgUmFkaW9sb2d5EkVtZXJnZW5jeSBNZWRpY2luZQ1FbmRvY3Jpbm9sb2d5JkVuZG9jcmlub2xvZ3ksIERpYWJldGVzIGFuZCBNZXRhYm9saXNtFkVuZG9jcmlub2xvZ3kvRGlhYmV0ZXMIRXBpbGVwc3kPRmFtaWx5IE1lZGljaW5lMUZlbWFsZSBQZWx2aWMgTWVkaWNpbmUgYW5kIFJlY29uc3RydWN0aXZlIFN1cmdlcnkWRm9vdCBhbmQgQW5rbGUgU3VyZ2VyeRNGb3JlbnNpYyBQc3ljaGlhdHJ5EEdhc3Ryb2VudGVyb2xvZ3kZR2VuZXJhbCBJbnRlcm5hbCBNZWRpY2luZQ9HZW5lcmFsIFN1cmdlcnkIR2VuZXRpY3MSR2VyaWF0cmljIE1lZGljaW5lFEdlcmlhdHJpYyBQc3ljaGlhdHJ5FEd5bmVjb2xvZ2ljIE9uY29sb2d5Ckd5bmVjb2xvZ3kMSGFuZCBTdXJnZXJ5FUhlYWQgYW5kIE5lY2sgU3VyZ2VyeQpIZW1hdG9sb2d5H0hvc3BpY2UgYW5kIFBhbGxpYXRpdmUgTWVkaWNpbmUZSS5NLiAtIFB1bG1vbmFyeSBEaXNlYXNlcwlJQ1UgQ292ZXISSW5mZWN0aW91cyBEaXNlYXNlHEludGVybmFsIE1lZCAtIENyaXRpY2FsIENhcmURSW50ZXJuYWwgTWVkaWNpbmUZSW50ZXJ2ZW50aW9uYWwgQ2FyZGlvbG9neRhJbnRlcnZlbnRpb25hbCBSYWRpb2xvZ3kdTGljLiBJbmRlcC4gQ2xpbi4gU29jLiBXb3JrZXIXTWF0ZXJuYWwvRmV0YWwgTWVkaWNpbmUXTWF0ZXJuYWwtRmV0YWwgTWVkaWNpbmUQTWVkaWNhbCBPbmNvbG9neRJNZWRpY2FsIFRveGljb2xvZ3kITWVkaWNpbmUbTmVvbmF0YWwtUGVyaW5hdGFsIE1lZGljaW5lC05lb25hdG9sb2d5Ck5lcGhyb2xvZ3kfTmV1cm9kZXZlbG9wbWVudGFsIERpc2FiaWxpdGllcxROZXVyb2xvZ2ljYWwgU3VyZ2VyeQlOZXVyb2xvZ3k4TmV1cm9sb2d5IHdpdGggU3BlY2lhbCBRdWFsaWZpY2F0aW9ucyBpbiBDaGlsZCBOZXVyb2xvZ3kWTmV1cm9tdXNjdWxhciBNZWRpY2luZRNOZXVyb3BoeXNpbyBNb25pdG9yDk5ldXJvcmFkaW9sb2d5DE5ldXJvc3VyZ2VyeRBOdWNsZWFyIE1lZGljaW5lEU51Y2xlYXIgUmFkaW9sb2d5E051cnNlIFByYWN0aXRpb25lcnMHTnVyc2luZxdPYnN0ZXRyaWNzIC0gR3luZWNvbG9neRdPYnN0ZXRyaWNzICYgR3luZWNvbG9neRVPY2N1cGF0aW9uYWwgTWVkaWNpbmUTT25jb2xvZ3kvSGVtYXRvbG9neQ1PcGh0aGFsbW9sb2d5Gk9yYWwgJiBNYXhpbGxvZmFjaWFsIFN1cmcuHE9yYWwgJiBNYXhpbGxvZmFjaWFsIFN1cmdlcnkbT3J0aG9wYWVkaWMgU3BvcnRzIE1lZGljaW5lE09ydGhvcGFlZGljIFN1cmdlcnkMT3J0aG9wYWVkaWNzDk90b2xhcnluZ29sb2d5D1BhaW4gTWFuYWdlbWVudA1QYWluIE1lZGljaW5lHlBhaW4gTWVkaWNpbmUgLSBBbmVzdGhlc2lvbG9neRRQYWluIE1lZGljaW5lIC0gUE0mUg9QYWxsaWF0aXZlIENhcmUJUGF0aG9sb2d5GVBhdGhvbG9neSBSZWNlcnRpZmljYXRpb24SUGF0aG9sb2d5LUFuYXRvbWljFFBhdGhvbG9neS1IZW1hdG9sb2d5FFBlZGkgJiBBZHVsdCBBbGxlcmd5GVBFREkuIEhFTUFUT0xPR1ktT05DT0xPR1kRUGVkaWF0cmljIEFsbGVyZ3kgUGVkaWF0cmljIEFsbGVyZ3kgYW5kIEltbXVub2xvZ3kYUGVkaWF0cmljIEFuZXN0aGVzaW9sb2d5FFBlZGlhdHJpYyBDYXJkaW9sb2d5IFBlZGlhdHJpYyBDcml0aWNhbCBDYXJlIE1lZGljaW5lFVBlZGlhdHJpYyBEZXJtYXRvbG9neRNQZWRpYXRyaWMgRW1lcmdlbmN5HFBlZGlhdHJpYyBFbWVyZ2VuY3kgTWVkaWNpbmUXUGVkaWF0cmljIEVuZG9jcmlub2xvZ3kaUGVkaWF0cmljIEdhc3Ryb2VudGVyb2xvZ3kdUGVkaWF0cmljIEhlbWF0b2xvZ3kvT25jb2xvZ3kdUGVkaWF0cmljIEhlbWF0b2xvZ3ktT25jb2xvZ3kVUGVkaWF0cmljIEhvc3BpdGFsaXN0HFBlZGlhdHJpYyBJbmZlY3Rpb3VzIERpc2Vhc2UdUGVkaWF0cmljIEluZmVjdGlvdXMgRGlzZWFzZXMUUGVkaWF0cmljIE5lcGhyb2xvZ3kTUGVkaWF0cmljIE5ldXJvbG9neRdQZWRpYXRyaWMgT3BodGhhbG1vbG9neRZQZWRpYXRyaWMgT3J0aG9wYWVkaWNzGFBlZGlhdHJpYyBPdG9sYXJ5bmdvbG9neRVQZWRpYXRyaWMgUHVsbW9ub2xvZ3kTUGVkaWF0cmljIFJhZGlvbG9neRZQZWRpYXRyaWMgUmhldW1hdG9sb2d5EVBlZGlhdHJpYyBTdXJnZXJ5EVBlZGlhdHJpYyBVcm9sb2d5ClBlZGlhdHJpY3MeUGVkaWF0cmljcyBIZW1hdG9sb2d5L09uY29sb2d5HlBlZGlhdHJpY3MvQWRvbGVzY2VudCBNZWRpY2luZRNQZWRpYXRyaWNzL0dlbmV0aWNzClBoYXJtYWNpc3QWUGh5c2ljYWwgTWVkLiAmIFJlaGFiLhlQaHlzaWNhbCBNZWRpY2luZSAmIFJlaGFiIlBoeXNpY2FsIE1lZGljaW5lICYgUmVoYWJpbGl0YXRpb24kUGh5c2ljYWwgTWVkaWNpbmUgYW5kIFJlaGFiaWxpdGF0aW9uE1BoeXNpY2lhbiBBc3Npc3RhbnQPUGxhc3RpYyBTdXJnZXJ5CFBvZGlhdHJ5DFByaW1hcnkgQ2FyZQ5Qcm9zdGhvZG9udGljcwpQc3ljaGlhdHJ5FlBzeWNoaWF0cnkgJiBOZXVyb2xvZ3kKUHN5Y2hvbG9neStQdWJsaWMgSGVhbHRoICYgR2VuZXJhbCBQcmV2ZW50aXZlIE1lZGljaW5lLVB1YmxpYyBIZWFsdGggYW5kIEdlbmVyYWwgUHJldmVudGl2ZSBNZWRpY2luZRFQdWxtb25hcnkgRGlzZWFzZRJSYWRpYXRpb24gT25jb2xvZ3kJUmFkaW9sb2d5E1JhZGlvbG9neSBBc3Npc3RhbnQaUmVwcm9kdWN0aXZlIEVuZG9jcmlub2xvZ3kmUmVwcm9kdWN0aXZlIEVuZG9jcmlub2xvZ3kvSW5mZXJ0aWxpdHkMUmhldW1hdG9sb2d5DlNsZWVwIE1lZGljaW5lBVNwaW5lD1Nwb3J0cyBNZWRpY2luZQdTdXJnZXJ5E1N1cmdlcnkgb2YgdGhlIEhhbmQWU3VyZ2ljYWwgQ3JpdGljYWwgQ2FyZRFTdXJnaWNhbCBPbmNvbG9neQxUZWxlbWVkaWNpbmUVVEhFUkFQRVVUSUMgUkFESU9MT0dZHFRob3JhY2ljIGFuZCBDYXJkaWFjIFN1cmdlcnkQVGhvcmFjaWMgU3VyZ2VyeRJVcmdlbnQgQ2FyZSBDZW50ZXINVXJvZ3luZWNvbG9neQdVcm9sb2d5JVZhc2N1bGFyIGFuZCBJbnRlcnZlbnRpb25hbCBSYWRpb2xvZ3kRVmFzY3VsYXIgTWVkaWNpbmUSVmFzY3VsYXIgTmV1cm9sb2d5EFZhc2N1bGFyIFN1cmdlcnkKV291bmQgQ2FyZRQrA6wBZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2RkAgcPEA8WAh8GZ2QPFkYCAQICAgMCBAIFAgYCBwIIAgkCCgILAgwCDQIOAg8CEAIRAhICEwIUAhUCFgIXAhgCGQIaAhsCHAIdAh4CHwIgAiECIgIjAiQCJQImAicCKAIpAioCKwIsAi0CLgIvAjACMQIyAjMCNAI1AjYCNwI4AjkCOgI7AjwCPQI+Aj8CQAJBAkICQwJEAkUCRhZGEAUFQWN0b24FBUFjdG9uZxAFCUFybGluZ3RvbgUJQXJsaW5ndG9uZxAFBkF1YnVybgUGQXVidXJuZxAFB0JlbG1vbnQFB0JlbG1vbnRnEAUGQm9zdG9uBQZCb3N0b25nEAUJQnJhaW50cmVlBQlCcmFpbnRyZWVnEAUIQnJvY2t0b24FCEJyb2NrdG9uZxAFCUJyb29rbGluZQUJQnJvb2tsaW5lZxAFCkJ1cmxpbmd0b24FCkJ1cmxpbmd0b25nEAUJQ2FtYnJpZGdlBQlDYW1icmlkZ2VnEAUKQ2hlbG1zZm9yZAUKQ2hlbG1zZm9yZGcQBQ5DaGVzdG51dCAgSGlsbAUOQ2hlc3RudXQgIEhpbGxnEAUIQ29sdW1iaWEFCENvbHVtYmlhZxAFB0NvbmNvcmQFB0NvbmNvcmRnEAUHRGFudmVycwUHRGFudmVyc2cQBQZEZWRoYW0FBkRlZGhhbWcQBQtFYXN0Ym9yb3VnaAULRWFzdGJvcm91Z2hnEAUHRXZlcmV0dAUHRXZlcmV0dGcQBQpGb3hib3JvdWdoBQpGb3hib3JvdWdoZxAFCkZyYW1pbmdoYW0FCkZyYW1pbmdoYW1nEAUIRnJhbmtsaW4FCEZyYW5rbGluZxAFCEhhbWlsdG9uBQhIYW1pbHRvbmcQBQlIYXZlcmhpbGwFCUhhdmVyaGlsbGcQBQhIb3BlZGFsZQUISG9wZWRhbGVnEAUJSG9wa2ludG9uBQlIb3BraW50b25nEAUHTGViYW5vbgUHTGViYW5vbmcQBQpMZW9taW5zdGVyBQpMZW9taW5zdGVyZxAFCUxleGluZ3RvbgUJTGV4aW5ndG9uZxAFBEx5bm4FBEx5bm5nEAULTWFybGJvcm91Z2gFC01hcmxib3JvdWdoZxAFCE1lZGZpZWxkBQhNZWRmaWVsZGcQBQdNZWRmb3JkBQdNZWRmb3JkZxAFB01lbHJvc2UFB01lbHJvc2VnEAUHTWlsZm9yZAUHTWlsZm9yZGcQBQZNaWx0b24FBk1pbHRvbmcQBQlOYW50dWNrZXQFCU5hbnR1Y2tldGcQBQZOYXNodWEFBk5hc2h1YWcQBQlOYXNodmlsbGUFCU5hc2h2aWxsZWcQBQZOYXRpY2sFBk5hdGlja2cQBQdOZWVkaGFtBQdOZWVkaGFtZxAFCE5ldyBZb3JrBQhOZXcgWW9ya2cQBQZOZXd0b24FBk5ld3RvbmcQBQ1Ob3J0aCBBbmRvdmVyBQ1Ob3J0aCBBbmRvdmVyZxAFC05vcnRoYW1wdG9uBQtOb3J0aGFtcHRvbmcQBQxOb3J0aGJvcm91Z2gFDE5vcnRoYm9yb3VnaGcQBQdOb3J3ZWxsBQdOb3J3ZWxsZxAFB05vcndvb2QFB05vcndvb2RnEAUIUGVtYnJva2UFCFBlbWJyb2tlZxAFClByb3ZpZGVuY2UFClByb3ZpZGVuY2VnEAUGUXVpbmN5BQZRdWluY3lnEAUHUmF5bmhhbQUHUmF5bmhhbWcQBQZSZXZlcmUFBlJldmVyZWcQBQVTYWxlbQUFU2FsZW1nEAUMU291dGhib3JvdWdoBQxTb3V0aGJvcm91Z2hnEAUHU3VkYnVyeQUHU3VkYnVyeWcQBQdUYXVudG9uBQdUYXVudG9uZxAFCVdha2VmaWVsZAUJV2FrZWZpZWxkZxAFB1dhbHBvbGUFB1dhbHBvbGVnEAUHV2FsdGhhbQUHV2FsdGhhbWcQBQlXYXRlcnRvd24FCVdhdGVydG93bmcQBQdXYXlsYW5kBQdXYXlsYW5kZxAFCVdlbGxlc2xleQUJV2VsbGVzbGV5ZxAFC1dlc3Rib3JvdWdoBQtXZXN0Ym9yb3VnaGcQBQlXZXN0ZmllbGQFCVdlc3RmaWVsZGcQBQZXZXN0b24FBldlc3RvbmcQBQhXZXN0d29vZAUIV2VzdHdvb2RnEAUIV2V5bW91dGgFCFdleW1vdXRoZxAFCldpbmNoZXN0ZXIFCldpbmNoZXN0ZXJnEAUGV29idXJuBQZXb2J1cm5nEAUJV29yY2VzdGVyBQlXb3JjZXN0ZXJnZGQCEQ8WAh8DAgoWFGYPZBYCZg8VAyovdmVybm9uLWNhbmNlci1jZW50ZXIvdmVybm9uLWNhbmNlci1jZW50ZXIBMwZDYW5jZXJkAgEPZBYCZg8VAzovZWxmZXJzLWNhcmRpb3Zhc2N1bGFyLWNlbnRlci9lbGZlcnMtY2FyZGlvdmFzY3VsYXItY2VudGVyATQFSGVhcnRkAgIPZBYCZg8VAx0vbWF0ZXJuaXR5L21hdGVybml0eS1zZXJ2aWNlcwE1CU1hdGVybml0eWQCAw9kFgJmDxUDFi9wc3ljaGlhdHJ5L3BzeWNoaWF0cnkBNg1NZW50YWwgSGVhbHRoZAIED2QWAmYPFQMhL29ydGhvcGFlZGljcy9vcnRob3BhZWRpYy1zdXJnZXJ5ATcMT3J0aG9wYWVkaWNzZAIFD2QWAmYPFQMzL3BlZGlhdHJpY3Mvd2VsY29tZS10by10aGUtZGVwYXJ0bWVudC1vZi1wZWRpYXRyaWNzATkKUGVkaWF0cmljc2QCBg9kFgJmDxUDJS9wcmltYXJ5LWNhcmUvd2VsY29tZS10by1wcmltYXJ5LWNhcmUBOAxQcmltYXJ5IENhcmVkAgcPZBYCZg8VAx4vc3VyZ2VyeS9kZXBhcnRtZW50LW9mLXN1cmdlcnkCMTAHU3VyZ2VyeWQCCA9kFgJmDxUDPi9jZW50ZXItZm9yLXdlaWdodC1sb3NzLXN1cmdlcnkvY2VudGVyLWZvci13ZWlnaHQtbG9zcy1zdXJnZXJ5AjI1C1dlaWdodCBMb3NzZAIJD2QWAmYPFQMqL3dvbWVucy1oZWFsdGgtY2VudGVyL3dvbWVucy1oZWFsdGgtY2VudGVyAjExDldvbWVuJ3MgSGVhbHRoZAITDzwrAAkBAA8WBB4IRGF0YUtleXMWAB8DAhhkFjBmD2QWAmYPFQIXL0NvbnRlbnRQYWdlLmFzcHg/bmQ9MTgOQW5lc3RoZXNpb2xvZ3lkAgEPZBYCZg8VAhcvQ29udGVudFBhZ2UuYXNweD9uZD0yNA1CcmVhc3QgQ2VudGVyZAICD2QWAmYPFQIYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9MTI4CkNhcmRpb2xvZ3lkAgMPZBYCZg8VAhgvQ29udGVudFBhZ2UuYXNweD9uZD02NzkLRGVybWF0b2xvZ3lkAgQPZBYCZg8VAhgvQ29udGVudFBhZ2UuYXNweD9uZD0zNjQSRW1lcmdlbmN5IE1lZGljaW5lZAIFD2QWAmYPFQIYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NzI5D0ZhbWlseSBNZWRpY2luZWQCBg9kFgJmDxUCGC9Db250ZW50UGFnZS5hc3B4P25kPTU4MxBHYXN0cm9lbnRlcm9sb2d5ZAIHD2QWAmYPFQIYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9MjIzCkhlbWF0b2xvZ3lkAggPZBYCZg8VAhkvQ29udGVudFBhZ2UuYXNweD9uZD0xMjU3E0luZmVjdGlvdXMgRGlzZWFzZXNkAgkPZBYCZg8VAhgvQ29udGVudFBhZ2UuYXNweD9uZD0yODIMSm9pbnQgQ2VudGVyZAIKD2QWAmYPFQIYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9MzkwB0tpZG5leXNkAgsPZBYCZg8VAhgvQ29udGVudFBhZ2UuYXNweD9uZD0zNDIDTGFiZAIMD2QWAmYPFQIYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9MzY4CE1lZGljaW5lZAIND2QWAmYPFQIYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9MzkxCU5ldXJvbG9neWQCDg9kFgJmDxUCGC9Db250ZW50UGFnZS5hc3B4P25kPTcwOQdOdXJzaW5nZAIPD2QWAmYPFQIYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9MTk5DU9waHRoYWxtb2xvZ3lkAhAPZBYCZg8VAhgvQ29udGVudFBhZ2UuYXNweD9uZD00MDgPUGFpbiBNYW5hZ2VtZW50ZAIRD2QWAmYPFQIYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9Njc1ClBzeWNoaWF0cnlkAhIPZBYCZg8VAhgvQ29udGVudFBhZ2UuYXNweD9uZD00ODQJUmFkaW9sb2d5ZAITD2QWAmYPFQIYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NTU5DlJlaGFiaWxpdGF0aW9uZAIUD2QWAmYPFQIYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9Mjg0DFNsZWVwIENlbnRlcmQCFQ9kFgJmDxUCGC9Db250ZW50UGFnZS5hc3B4P25kPTI2MwxTcGluZSBDZW50ZXJkAhYPZBYCZg8VAhgvQ29udGVudFBhZ2UuYXNweD9uZD0xNzgLVXJnZW50IENhcmVkAhcPZBYCZg8VAhgvQ29udGVudFBhZ2UuYXNweD9uZD00NjgPV29tZW4ncyBJbWFnaW5nZAIVDxYCHgRocmVmBSEvQ29udGVudFBhZ2UuYXNweD9uZD00MyNTZXJ2aWNlc0FkAhcPFgIfCAUhL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NDMjU2VydmljZXNCZAIZDxYCHwgFIS9Db250ZW50UGFnZS5hc3B4P25kPTQzI1NlcnZpY2VzQ2QCGw8WAh8IBSEvQ29udGVudFBhZ2UuYXNweD9uZD00MyNTZXJ2aWNlc0RkAh0PFgIfCAUhL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NDMjU2VydmljZXNFZAIfDxYCHwgFIS9Db250ZW50UGFnZS5hc3B4P25kPTQzI1NlcnZpY2VzRmQCIQ8WAh8IBSEvQ29udGVudFBhZ2UuYXNweD9uZD00MyNTZXJ2aWNlc0dkAiMPFgIfCAUhL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NDMjU2VydmljZXNIZAIlDxYCHwgFIS9Db250ZW50UGFnZS5hc3B4P25kPTQzI1NlcnZpY2VzSWQCJw8WAh8IBSEvQ29udGVudFBhZ2UuYXNweD9uZD00MyNTZXJ2aWNlc0pkAikPFgIfCAUhL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NDMjU2VydmljZXNLZAIrDxYCHwgFIS9Db250ZW50UGFnZS5hc3B4P25kPTQzI1NlcnZpY2VzTGQCLQ8WAh8IBSEvQ29udGVudFBhZ2UuYXNweD9uZD00MyNTZXJ2aWNlc01kAi8PFgIfCAUhL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NDMjU2VydmljZXNOZAIxDxYCHwgFIS9Db250ZW50UGFnZS5hc3B4P25kPTQzI1NlcnZpY2VzT2QCMw8WAh8IBSEvQ29udGVudFBhZ2UuYXNweD9uZD00MyNTZXJ2aWNlc1BkAjUPFgQfCAUhL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NDMjU2VydmljZXNRHgVjbGFzcwUPbGV0dGVyX2Rpc2FibGVkZAI3DxYCHwgFIS9Db250ZW50UGFnZS5hc3B4P25kPTQzI1NlcnZpY2VzUmQCOQ8WAh8IBSEvQ29udGVudFBhZ2UuYXNweD9uZD00MyNTZXJ2aWNlc1NkAjsPFgIfCAUhL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NDMjU2VydmljZXNUZAI9DxYCHwgFIS9Db250ZW50UGFnZS5hc3B4P25kPTQzI1NlcnZpY2VzVWQCPw8WAh8IBSEvQ29udGVudFBhZ2UuYXNweD9uZD00MyNTZXJ2aWNlc1ZkAkEPFgIfCAUhL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NDMjU2VydmljZXNXZAJDDxYEHwgFIS9Db250ZW50UGFnZS5hc3B4P25kPTQzI1NlcnZpY2VzWB8JBQ9sZXR0ZXJfZGlzYWJsZWRkAkUPFgQfCAUhL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NDMjU2VydmljZXNZHwkFD2xldHRlcl9kaXNhYmxlZGQCRw8WBB8IBSEvQ29udGVudFBhZ2UuYXNweD9uZD00MyNTZXJ2aWNlc1ofCQUPbGV0dGVyX2Rpc2FibGVkZAJJDxYCHwgFFy9Db250ZW50UGFnZS5hc3B4P25kPTQzZAJLD2QWAmYPZBYEAgcPFgIfAwIIFhBmD2QWAgIBDxYCHg1kYXRhLWxvY2F0aW9uBQExFgJmDxUCGC9Db250ZW50UGFnZS5hc3B4P25kPTYxMhlOZXd0b24tV2VsbGVzbGV5IEhvc3BpdGFsZAIBD2QWAgIBDxYCHwoFATIWAmYPFQIYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NjIzH0FtYnVsYXRvcnkgQ2FyZSBDZW50ZXIgLSBOYXRpY2tkAgIPZBYCAgEPFgIfCgUBMxYCZg8VAhgvQ29udGVudFBhZ2UuYXNweD9uZD02MjgfQW1idWxhdG9yeSBDYXJlIENlbnRlciAtIE5ld3RvbmQCAw9kFgICAQ8WAh8KBQE0FgJmDxUCGS9Db250ZW50UGFnZS5hc3B4P25kPTExNDAgQW1idWxhdG9yeSBDYXJlIENlbnRlciAtIFdhbHBvbGVkAgQPZBYCAgEPFgIfCgUBNRYCZg8VAhkvQ29udGVudFBhZ2UuYXNweD9uZD0xMTQxJEFtYnVsYXRvcnkgQ2FyZSBDZW50ZXIg4oCTIFdlbGxlc2xleWQCBQ9kFgICAQ8WAh8KBQE2FgJmDxUCGC9Db250ZW50UGFnZS5hc3B4P25kPTYxNhRFbWVyZ2VuY3kgRGVwYXJ0bWVudGQCBg9kFgICAQ8WAh8KBQE3FgJmDxUCGC9Db250ZW50UGFnZS5hc3B4P25kPTYyMSVPdXRwYXRpZW50IFN1cmdlcnkgQ2VudGVyIC0gV2VsbGVzbGV5ZAIHD2QWAgIBDxYCHwoFATgWAmYPFQIYL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NjE5HFVyZ2VudCBDYXJlIENlbnRlciAtIFdhbHRoYW1kAg0PFgIfAwIIFhBmD2QWAgIBDxYCHwoFATEWAgICDxUFNi9tZWRpYS9Ib3NwaXRhbExvY2F0aW9ucy9OZXd0b24tV2VsbGVzbGV5LUhvc3BpdGFsLmpwZxgvQ29udGVudFBhZ2UuYXNweD9uZD02MTIZTmV3dG9uLVdlbGxlc2xleSBIb3NwaXRhbIMCPGRpdiBzdHlsZT0id2lkdGg6NTAlO2Zsb2F0OmxlZnQ7Ij48cD4yMDE0IFdhc2hpbmd0b24gU3RyZWV0PC9wPjxwPk5ld3RvbiwgTUEgMDI0NjI8L3A+PHA+NjE3LTI0My02MDAwPC9wPjwvZGl2PjxkaXYgc3R5bGU9IndpZHRoOjUwJTtmbG9hdDpsZWZ0OyI+PHA+T3BlbiAyNCBob3Vyczxicj48YSBocmVmPSIvQ29udGVudFBhZ2UuYXNweD9uZD02MTIiPkxhYiBIb3VycyBhbmQgSG9saWRheSBIb3VycyBWYXJ5PC9hPjxicj4gJm5ic3A7PC9wPjwvZGl2PkRodHRwczovL3d3dy5nb29nbGUuY29tL21hcHM/cT0yMDE0K3dhc2hpbmd0b24rc3RyZWV0K25ld3RvbittYSswMjQ2MmQCAQ9kFgICAQ8WAh8KBQEyFgICAg8VBTovbWVkaWEvSG9zcGl0YWxMb2NhdGlvbnMvQW1idWxhdG9yeS1DYXJlLUNlbnRlci1OYXRpY2suanBnGC9Db250ZW50UGFnZS5hc3B4P25kPTYyMx9BbWJ1bGF0b3J5IENhcmUgQ2VudGVyIC0gTmF0aWNr0gEgPHA+MzA3IFcgQ2VudHJhbCBTdDwvcD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5OYXRpY2ssIE1BIDAxNzYwPC9wPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjYxNy0yNDMtNTM0NTwvcD4+aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzP3E9MzA3K3crY2VudHJhbCtzdCtuYXRpY2srbWErMDE3NjBkAgIPZBYCAgEPFgIfCgUBMxYCAgIPFQU6L21lZGlhL0hvc3BpdGFsTG9jYXRpb25zL0FtYnVsYXRvcnktQ2FyZS1DZW50ZXItTmV3dG9uLmpwZxgvQ29udGVudFBhZ2UuYXNweD9uZD02MjgfQW1idWxhdG9yeSBDYXJlIENlbnRlciAtIE5ld3RvbtYBIDxwPjE1OSBXZWxscyBBdmU8L3A+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+TmV3dG9uIENlbnRyZSwgTUEgMDI0NTk8L3A+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+NjE3LTI0My02MDAwPC9wPkJodHRwczovL3d3dy5nb29nbGUuY29tL21hcHM/cT0xNTkrd2VsbHMrYXZlK25ld3RvbitjZW50ZXIrbWErMDI0NTlkAgMPZBYCAgEPFgIfCgUBNBYCAgIPFQU7L21lZGlhL0hvc3BpdGFsTG9jYXRpb25zL0FtYnVsYXRvcnktQ2FyZS1DZW50ZXItV2FscG9sZS5qcGcZL0NvbnRlbnRQYWdlLmFzcHg/bmQ9MTE0MCBBbWJ1bGF0b3J5IENhcmUgQ2VudGVyIC0gV2FscG9sZdEBPHA+MzA3IFcgQ2VudHJhbCBTdDwvcD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5OYXRpY2ssIE1BIDAxNzYwPC9wPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjYxNy0yNDMtNTM0NTwvcD5CaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzP3E9MzA3K3crY2VudHJhbCtzdHJlZXQrTmF0aWNrK21hKzAxNzYwZAIED2QWAgIBDxYCHwoFATUWAgICDxUFLy9tZWRpYS9Ib3NwaXRhbExvY2F0aW9ucy85Nzh3b3JjZXN0ZXJyZXNpemUuanBnGS9Db250ZW50UGFnZS5hc3B4P25kPTExNDEkQW1idWxhdG9yeSBDYXJlIENlbnRlciDigJMgV2VsbGVzbGV57AEgIDxwPjk3OCBXb3JjZXN0ZXIgUm9hZCAocnRlIDkpPC9wPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPldlbGxlc2xleSwgTWFzc2FjaHVzZXR0cyAwMjQ4MjwvcD4gICAgICAgICAgICAgICAg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Q29udGVudFBhZ2UuYXNweD9uZD04OTgnPkZpbmQgYSBEZXBhcnRtZW50J3MgTG9jYXRpb248L2E+PC9saT48bGk+PGEgaHJlZj0nL0NvbnRlbnRQYWdlLmFzcHg/bmQ9ODk5Jz5Gb29kIFNlcnZpY2VzPC9hPjwvbGk+PGxpPjxhIGhyZWY9Jy9Db250ZW50UGFnZS5hc3B4P25kPTkwMCc+SG90ZWxzLCBSZXN0YXVyYW50cyBhbmQgTW9yZTwvYT48L2xpPjxsaT48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD05MDEnPkltcG9ydGFudCBQaG9uZSBOdW1iZXJzPC9hPjwvbGk+PGxpPjxhIGhyZWY9Jy9Db250ZW50UGFnZS5hc3B4P25kPTYyNic+UGFya2luZzwvYT48L2xpPjxsaT48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD04NzYnPlB1YmxpYyBUcmFuc3BvcnRhdGlvbjwvYT48L2xpPjxsaT48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD05MDInPlNlY3VyaXR5PC9hPjwvbGk+PGxpPjxhIGhyZWY9Jy9Db250ZW50UGFnZS5hc3B4P25kPTkwMyc+U21va2UtRnJlZSBDYW1wdXM8L2E+PC9saT48bGk+PGEgaHJlZj0nL0NvbnRlbnRQYWdlLmFzcHg/bmQ9OTA0Jz5WaXNpdGluZyBIb3VyczwvYT48L2xpPjxsaT48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD05MDUnPldpLUZpIEFjY2VzczwvYT48L2xpPjwvdWw+PHVsPjxsaT48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD0xMDg3Jz48aDMgY2xhc3M9bmVzdGVkTmF2PlNIT1A8L2gzPjwvYT48L2xpPjxsaSBjbGFzcz0nb2RkJz48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD03NzYnPkZsb3dlciBhbmQgR2lmdCBTaG9wPC9hPjwvbGk+PGxpIGNsYXNzPSdvZGQnPjxhIGhyZWY9Jy9Db250ZW50UGFnZS5hc3B4P25kPTkwNic+VGhyaWZ0IFNob3A8L2E+PC9saT48bGk+PGEgaHJlZj0nL0NvbnRlbnRQYWdlLmFzcHg/bmQ9ODQ4Jz48aDMgY2xhc3M9bmVzdGVkTmF2PkJJTExJTkcgQU5EIFJFQ09SRFM8L2gzPjwvYT48L2xpPjxsaSBjbGFzcz0nb2RkJz48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD04NzAnPkZpbmFuY2lhbCBBc3Npc3RhbmNlPC9hPjwvbGk+PGxpIGNsYXNzPSdvZGQnPjxhIGhyZWY9Jy9Db250ZW50UGFnZS5hc3B4P25kPTg2OSc+SGVscCB3aXRoIEZpbmFuY2lhbCBRdWVzdGlvbnM8L2E+PC9saT48bGkgY2xhc3M9J29kZCc+PGEgaHJlZj0nL0NvbnRlbnRQYWdlLmFzcHg/bmQ9ODczJz5NZWRpY2FsIFJlY29yZHM8L2E+PC9saT48bGkgY2xhc3M9J29kZCc+PGEgaHJlZj0nL0NvbnRlbnRQYWdlLmFzcHg/bmQ9ODcxJz5QYXJ0bmVycyBlQ2FyZTwvYT48L2xpPjxsaSBjbGFzcz0nb2RkJz48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD0xMTAwJz5QYXRpZW50IEdhdGV3YXk8L2E+PC9saT48L3VsPjx1bD48bGkgY2xhc3M9J29kZCc+PGEgaHJlZj0nL0NvbnRlbnRQYWdlLmFzcHg/bmQ9OTA3Jz48aDMgY2xhc3M9bmVzdGVkTmF2PlBBVElFTlQgUklHSFRTICYgUkVTUE9OU0lCSUxJVElFUzwvaDM+PC9hPjwvbGk+PGxpIGNsYXNzPSdvZGQnPjxhIGhyZWY9Jy9Db250ZW50UGFnZS5hc3B4P25kPTkwOCc+UGF0aWVudCBSZWxhdGlvbnM8L2E+PC9saT48bGkgY2xhc3M9J29kZCc+PGEgaHJlZj0nL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NzQ1Jz5Qcml2YWN5PC9hPjwvbGk+PGxpIGNsYXNzPSdvZGQnPjxhIGhyZWY9Jy9Db250ZW50UGFnZS5hc3B4P25kPTkxMCc+WW91ciBSaWdodHMgYXMgYSBQYXRpZW50PC9hPjwvbGk+PGxpIGNsYXNzPSdvZGQnPjxhIGhyZWY9Jy9Db250ZW50UGFnZS5hc3B4P25kPTEwODgnPjxoMyBjbGFzcz1uZXN0ZWROYXY+U0VSVklDRVM8L2gzPjwvYT48L2xpPjxsaSBjbGFzcz0nb2RkJz48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD05MDknPkludGVycHJldGVyIFNlcnZpY2VzPC9hPjwvbGk+PGxpIGNsYXNzPSdvZGQnPjxhIGhyZWY9Jy9Db250ZW50UGFnZS5hc3B4P25kPTY4Nic+UGFzdG9yYWwgQ2FyZSAvIENoYXBsYWlucycgT2ZmaWNlPC9hPjwvbGk+PC91bD5kAgYPD2QPEBYBZhYBFgQeDERlZmF1bHRWYWx1ZQUBMR8FZBYBAgNkZAIIDw9kDxAWAWYWARYCHwVkFgECA2RkAk8PZBYGZg8WAh8BBZMUPHVsPjxsaSBjbGFzcz0nbW9kYWwtYm9keSc+PGEgaHJlZj0nL0NPTlRFTlRQQUdFLkFTUFg/TkQ9OCc+PGI+Q0xBU1NFUzwvYj48L2E+PC9saT48bGkgY2xhc3M9J29kZCc+PGEgaHJlZj0nL0NvbnRlbnRQYWdlLmFzcHg/bmQ9ODg5Jz5DaGlsZGJpcnRoIEVkdWNhdGlvbjwvYT48L2xpPjxsaSBjbGFzcz0nb2RkJz48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD04OTAnPldlbGxuZXNzIENlbnRlcjwvYT48L2xpPjxsaSBjbGFzcz0nbW9kYWwtYm9keSc+PGEgaHJlZj0nL0NPTlRFTlRQQUdFLkFTUFg/TkQ9OTkwJz48Yj5DT01NVU5JVFkgRVZFTlRTPC9iPjwvYT48L2xpPjxsaSBjbGFzcz0nb2RkJz48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD05OTAnPkV2ZW50czwvYT48L2xpPjxsaSBjbGFzcz0nb2RkJz48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD04ODgnPlJ1bm5pbmcgU3Ryb25nPC9hPjwvbGk+PC91bD48dWw+PGxpIGNsYXNzPSdtb2RhbC1ib2R5Jz48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD04OTEnPjxiPlBBVElFTlQgR1VJREVTIEFORCBGT1JNUzwvYj48L2E+PC9saT48bGkgY2xhc3M9J29kZCc+PGEgaHJlZj0nL0NvbnRlbnRQYWdlLmFzcHg/bmQ9OTIwJz5IaXAgU3VyZ2VyeSBQYXRpZW50IEd1aWRlPC9hPjwvbGk+PGxpIGNsYXNzPSdvZGQnPjxhIGhyZWY9Jy9Db250ZW50UGFnZS5hc3B4P25kPTkyMSc+S25lZSBSZXBsYWNlbWVudCBQYXRpZW50IEd1aWRlPC9hPjwvbGk+PGxpIGNsYXNzPSdvZGQnPjxhIGhyZWY9Jy9Db250ZW50UGFnZS5hc3B4P25kPTg5Mic+TWFzc2FjaHVzZXR0cyBIZWFsdGggQ2FyZSBQcm94eTwvYT48L2xpPjxsaSBjbGFzcz0nb2RkJz48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD05MjInPk1hdGVybml0eSBHdWlkZTwvYT48L2xpPjxsaSBjbGFzcz0nb2RkJz48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD04OTMnPlBhdGllbnQgRWR1Y2F0aW9uIFNoZWV0czwvYT48L2xpPjxsaSBjbGFzcz0nb2RkJz48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD05MjQnPlBlZGlhdHJpYyBHYXN0cm9lbnRlcm9sb2d5IFByb2NlZHVyZSBHdWlkZTwvYT48L2xpPjxsaSBjbGFzcz0nb2RkJz48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD05MjYnPlBlZGlhdHJpYyBTdXJnZXJ5IEd1aWRlPC9hPjwvbGk+PGxpIGNsYXNzPSdvZGQnPjxhIGhyZWY9Jy9Db250ZW50UGFnZS5hc3B4P25kPTkyMyc+UG9zdHBhcnR1bSBHdWlkZTwvYT48L2xpPjxsaSBjbGFzcz0nb2RkJz48YSBocmVmPScvbWVkaWEvZmlsZS9TdXJnaWNhbENlbnRlcl9QYXRpZW50RWRNYXJjaDI5MjAxNy5wZGYnPlByZXBhcmluZyBmb3IgWW91ciBTdXJnZXJ5IEd1aWRlPC9hPjwvbGk+PGxpIGNsYXNzPSdvZGQnPjxhIGhyZWY9Jy9tZWRpYS9maWxlL0RpcmVjdG9yeSUyMG9mJTIwU2VydmljZXMlMjB1cGRhdGVkJTIwQXByaWwlMjAyMDE1LnBkZic+U2VuaW9yIFNlcnZpY2VzIERpcmVjdG9yeTwvYT48L2xpPjxsaSBjbGFzcz0nb2RkJz48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD05MjcnPlNwaW5lIFN1cmdlcnkgR3VpZGU8L2E+PC9saT48bGkgY2xhc3M9J29kZCc+PGEgaHJlZj0nL0NvbnRlbnRQYWdlLmFzcHg/bmQ9ODc4Jz5VbmRlcnN0YW5kaW5nIElucGF0aWVudCBhbmQgT2JzZXJ2YXRpb24gQWRtaXNzaW9uIFN0YXR1czwvYT48L2xpPjwvdWw+PHVsPjxsaSBjbGFzcz0nb2RkJz48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD05OTEnPjxiPkNPTU1VTklUWSBTRVJWSUNFUzwvYj48L2E+PC9saT48bGkgY2xhc3M9J29kZCc+PGEgaHJlZj0nL0NvbnRlbnRQYWdlLmFzcHg/bmQ9ODYwJz5CYWJ5IFNhZmUgSGF2ZW48L2E+PC9saT48bGkgY2xhc3M9J29kZCc+PGEgaHJlZj0nL0NvbnRlbnRQYWdlLmFzcHg/bmQ9Njk1Jz5DYXJlRmluZGVyOiBGaW5kIGEgUGh5c2ljaWFuPC9hPjwvbGk+PGxpIGNsYXNzPSdvZGQnPjxhIGhyZWY9Jy9Db250ZW50UGFnZS5hc3B4P25kPTc1Myc+Q2hpbGRyZW4ncyBDb3JuZXIgYXQgTmV3dG9uLVdlbGxlc2xleSBIb3NwaXRhbDwvYT48L2xpPjxsaSBjbGFzcz0nb2RkJz48YSBocmVmPScvQ29udGVudFBhZ2UuYXNweD9uZD04MDgnPkRvbWVzdGljIGFuZCBTZXh1YWwgVmlvbGVuY2UgU2VydmljZXM8L2E+PC9saT48bGkgY2xhc3M9J29kZCc+PGEgaHJlZj0nL0NvbnRlbnRQYWdlLmFzcHg/bmQ9ODAxJz5IRUFMIC0gSGVscGluZyBFZHVjYXRlIEFmdGVyIExvc3M8L2E+PC9saT48bGkgY2xhc3M9J29kZCc+PGEgaHJlZj0nL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NzYyJz5MYWN0YXRpb24gLyBCcmVhc3RmZWVkaW5nIFNlcnZpY2VzPC9hPjwvbGk+PGxpIGNsYXNzPSdvZGQnPjxhIGhyZWY9Jy9Db250ZW50UGFnZS5hc3B4P25kPTg1OSc+U3BlYWtlcnMgQnVyZWF1PC9hPjwvbGk+PGxpIGNsYXNzPSdvZGQnPjxhIGhyZWY9Jy9Db250ZW50UGFnZS5hc3B4P25kPTY5NCc+U3VwcG9ydCBHcm91cHM8L2E+PC9saT48bGkgY2xhc3M9J29kZCc+PGEgaHJlZj0nL0NvbnRlbnRQYWdlLmFzcHg/bmQ9MTE2MCc+PGI+UkVTRUFSQ0g8L2I+PC9hPjwvbGk+PC91bD5kAgYPD2QPEBYBZhYBFgQfCwUBMh8FZBYBAgNkZAIIDw9kDxAWAWYWARYCHwVkFgECA2RkAlEPZBYEAgEPFgIfAQWQAjxhIGhyZWY9Imh0dHA6Ly93d3cubndoLm9yZy8iPjxpbWcgc3JjPScvX2ltZy9ob3VzZV9pY29uLnBuZycvPjwvYT4mbmJzcDsgPGltZyBjbGFzcz0nc3BhY2VyJyBzcmM9Jy9faW1nL3NwYWNlcl9pY29uLnBuZycvPiAmbmJzcDs8YSBocmVmPScvZmluZC1hLWRvY3Rvci9maW5kLWEtZG9jdG9yLWhvbWUnPkZpbmQgQSBEb2N0b3I8L2E+Jm5ic3A7IDxpbWcgY2xhc3M9J3NwYWNlcicgc3JjPScvX2ltZy9zcGFjZXJfaWNvbi5wbmcnLz4gJm5ic3A7RmluZCBBIERvY3RvciBIb21lZAIDDw8WAh8EZ2RkAgsPFgIfBGcWAgIBDxYCHglpbm5lcmh0bWwFDUZpbmQgQSBEb2N0b3JkAg0PZBYEZg9kFgJmD2QWDAIBDw9kDxAWAWYWARYCHwUFAzg0NxYBAgRkZAIDDw9kDxAWAWYWARYCHwUFAzg0NxYBAgRkZAIFDw9kDxAWAWYWARYCHwUFAzg0NxYBAgRkZAIHDxYEHwNmHwRoZAIJDxYCHwMCARYCZg9kFggCAQ8PFgQfAWUfBGhkZAIDDw8WBB8BZR8EaGRkAgUPFgIfBGhkAgcPDxYCHwFlZGQCCw8WBB8DAgEfBGgWAmYPZBYIAgEPDxYEHwFlHwRoZGQCAw8PFgQfAWUfBGhkZAIFDxYCHwRoZAIHDw8WAh8BZWRkAgEPDxYCHgpUb3RhbFBhZ2VzAhZkFgZmD2QWAgIBDxYCHwRnFgYCAw9kFgQCCw8QZBAVrQEQU2VsZWN0IFNwZWNpYWx0eQAUQWRkaWN0aW9uIFBzeWNoaWF0cnkTQWRvbGVzY2VudCBNZWRpY2luZSJBZHVsdCAmIFBlZGkuIEFsbGVyZ3kgJiBJbW11bm9sb2d5GEFkdWx0IElucGF0aWVudCBNZWRpY2luZRRBbGxlcmd5ICYgSW1tdW5vbG9neRZBbGxlcmd5IGFuZCBJbW11bm9sb2d5J0FuYXRvbWljIFBhdGhvbG9neSAmIENsaW5pY2FsIFBhdGhvbG9neQ5BbmVzdGhlc2lvbG9neR5Bbmdpb2dyYXBoeSAmIEludGVydmVudGlvbiBSYWQVQmVoYXZpb3JhbCBQZWRpYXRyaWNzCkNhcmRpb2xvZ3kWQ2FyZGlvdmFzY3VsYXIgRGlzZWFzZRtDZXJ0LlJlZy4gTnVyc2UgQW5lc3RoZXRpc3QXQ2VydGlmaWVkIE51cnNlIE1pZHdpZmUcQ2VydGlmaWVkIE51cnNlIFByYWN0aXRpb25lchdDaGlsZCAmIEFkb2xlc2NlbnQgUHN5Lh9DaGlsZCBhbmQgQWRvbGVzY2VudCBQc3ljaGlhdHJ5HUNsaW5pY2FsIEJpb2NoZW1pY2FsIEdlbmV0aWNzIkNsaW5pY2FsIENhcmRpYWMgRWxlY3Ryb3BoeXNpb2xvZ3keQ2xpbmljYWwgR2VuZXRpY3MgYW5kIEdlbm9taWNzFENsaW5pY2FsIEluZm9ybWF0aWNzGENsaW5pY2FsIE5ldXJvcGh5c2lvbG9neRBDbG5pY2FsIEdlbmV0aWNzGENvbG9uIGFuZCBSZWN0YWwgU3VyZ2VyeRZDcml0aWNhbCBDYXJlIE1lZGljaW5lDUN5dG9wYXRob2xvZ3kLRGVybWF0b2xvZ3kQRGVybWF0b3BhdGhvbG9neSNEZXZlbG9wbWVudGFsLUJlaGF2aW9yYWwgUGVkaWF0cmljcxREaWFnbm9zdGljIFJhZGlvbG9neRJFbWVyZ2VuY3kgTWVkaWNpbmUNRW5kb2NyaW5vbG9neSZFbmRvY3Jpbm9sb2d5LCBEaWFiZXRlcyBhbmQgTWV0YWJvbGlzbRZFbmRvY3Jpbm9sb2d5L0RpYWJldGVzCEVwaWxlcHN5D0ZhbWlseSBNZWRpY2luZTFGZW1hbGUgUGVsdmljIE1lZGljaW5lIGFuZCBSZWNvbnN0cnVjdGl2ZSBTdXJnZXJ5FkZvb3QgYW5kIEFua2xlIFN1cmdlcnkTRm9yZW5zaWMgUHN5Y2hpYXRyeRBHYXN0cm9lbnRlcm9sb2d5GUdlbmVyYWwgSW50ZXJuYWwgTWVkaWNpbmUPR2VuZXJhbCBTdXJnZXJ5CEdlbmV0aWNzEkdlcmlhdHJpYyBNZWRpY2luZRRHZXJpYXRyaWMgUHN5Y2hpYXRyeRRHeW5lY29sb2dpYyBPbmNvbG9neQpHeW5lY29sb2d5DEhhbmQgU3VyZ2VyeRVIZWFkIGFuZCBOZWNrIFN1cmdlcnkKSGVtYXRvbG9neR9Ib3NwaWNlIGFuZCBQYWxsaWF0aXZlIE1lZGljaW5lGUkuTS4gLSBQdWxtb25hcnkgRGlzZWFzZXMJSUNVIENvdmVyEkluZmVjdGlvdXMgRGlzZWFzZRxJbnRlcm5hbCBNZWQgLSBDcml0aWNhbCBDYXJlEUludGVybmFsIE1lZGljaW5lGUludGVydmVudGlvbmFsIENhcmRpb2xvZ3kYSW50ZXJ2ZW50aW9uYWwgUmFkaW9sb2d5HUxpYy4gSW5kZXAuIENsaW4uIFNvYy4gV29ya2VyF01hdGVybmFsL0ZldGFsIE1lZGljaW5lF01hdGVybmFsLUZldGFsIE1lZGljaW5lEE1lZGljYWwgT25jb2xvZ3kSTWVkaWNhbCBUb3hpY29sb2d5CE1lZGljaW5lG05lb25hdGFsLVBlcmluYXRhbCBNZWRpY2luZQtOZW9uYXRvbG9neQpOZXBocm9sb2d5H05ldXJvZGV2ZWxvcG1lbnRhbCBEaXNhYmlsaXRpZXMUTmV1cm9sb2dpY2FsIFN1cmdlcnkJTmV1cm9sb2d5OE5ldXJvbG9neSB3aXRoIFNwZWNpYWwgUXVhbGlmaWNhdGlvbnMgaW4gQ2hpbGQgTmV1cm9sb2d5Fk5ldXJvbXVzY3VsYXIgTWVkaWNpbmUTTmV1cm9waHlzaW8gTW9uaXRvcg5OZXVyb3JhZGlvbG9neQxOZXVyb3N1cmdlcnkQTnVjbGVhciBNZWRpY2luZRFOdWNsZWFyIFJhZGlvbG9neRNOdXJzZSBQcmFjdGl0aW9uZXJzB051cnNpbmcXT2JzdGV0cmljcyAtIEd5bmVjb2xvZ3kXT2JzdGV0cmljcyAmIEd5bmVjb2xvZ3kVT2NjdXBhdGlvbmFsIE1lZGljaW5lE09uY29sb2d5L0hlbWF0b2xvZ3kNT3BodGhhbG1vbG9neRpPcmFsICYgTWF4aWxsb2ZhY2lhbCBTdXJnLhxPcmFsICYgTWF4aWxsb2ZhY2lhbCBTdXJnZXJ5G09ydGhvcGFlZGljIFNwb3J0cyBNZWRpY2luZRNPcnRob3BhZWRpYyBTdXJnZXJ5DE9ydGhvcGFlZGljcw5PdG9sYXJ5bmdvbG9neQ9QYWluIE1hbmFnZW1lbnQNUGFpbiBNZWRpY2luZR5QYWluIE1lZGljaW5lIC0gQW5lc3RoZXNpb2xvZ3kUUGFpbiBNZWRpY2luZSAtIFBNJlIPUGFsbGlhdGl2ZSBDYXJlCVBhdGhvbG9neRlQYXRob2xvZ3kgUmVjZXJ0aWZpY2F0aW9uElBhdGhvbG9neS1BbmF0b21pYxRQYXRob2xvZ3ktSGVtYXRvbG9neRRQZWRpICYgQWR1bHQgQWxsZXJneRlQRURJLiBIRU1BVE9MT0dZLU9OQ09MT0dZEVBlZGlhdHJpYyBBbGxlcmd5IFBlZGlhdHJpYyBBbGxlcmd5IGFuZCBJbW11bm9sb2d5GFBlZGlhdHJpYyBBbmVzdGhlc2lvbG9neRRQZWRpYXRyaWMgQ2FyZGlvbG9neSBQZWRpYXRyaWMgQ3JpdGljYWwgQ2FyZSBNZWRpY2luZRVQZWRpYXRyaWMgRGVybWF0b2xvZ3kTUGVkaWF0cmljIEVtZXJnZW5jeRxQZWRpYXRyaWMgRW1lcmdlbmN5IE1lZGljaW5lF1BlZGlhdHJpYyBFbmRvY3Jpbm9sb2d5GlBlZGlhdHJpYyBHYXN0cm9lbnRlcm9sb2d5HVBlZGlhdHJpYyBIZW1hdG9sb2d5L09uY29sb2d5HVBlZGlhdHJpYyBIZW1hdG9sb2d5LU9uY29sb2d5FVBlZGlhdHJpYyBIb3NwaXRhbGlzdBxQZWRpYXRyaWMgSW5mZWN0aW91cyBEaXNlYXNlHVBlZGlhdHJpYyBJbmZlY3Rpb3VzIERpc2Vhc2VzFFBlZGlhdHJpYyBOZXBocm9sb2d5E1BlZGlhdHJpYyBOZXVyb2xvZ3kXUGVkaWF0cmljIE9waHRoYWxtb2xvZ3kWUGVkaWF0cmljIE9ydGhvcGFlZGljcxhQZWRpYXRyaWMgT3RvbGFyeW5nb2xvZ3kVUGVkaWF0cmljIFB1bG1vbm9sb2d5E1BlZGlhdHJpYyBSYWRpb2xvZ3kWUGVkaWF0cmljIFJoZXVtYXRvbG9neRFQZWRpYXRyaWMgU3VyZ2VyeRFQZWRpYXRyaWMgVXJvbG9neQpQZWRpYXRyaWNzHlBlZGlhdHJpY3MgSGVtYXRvbG9neS9PbmNvbG9neR5QZWRpYXRyaWNzL0Fkb2xlc2NlbnQgTWVkaWNpbmUTUGVkaWF0cmljcy9HZW5ldGljcwpQaGFybWFjaXN0FlBoeXNpY2FsIE1lZC4gJiBSZWhhYi4ZUGh5c2ljYWwgTWVkaWNpbmUgJiBSZWhhYiJQaHlzaWNhbCBNZWRpY2luZSAmIFJlaGFiaWxpdGF0aW9uJFBoeXNpY2FsIE1lZGljaW5lIGFuZCBSZWhhYmlsaXRhdGlvbhNQaHlzaWNpYW4gQXNzaXN0YW50D1BsYXN0aWMgU3VyZ2VyeQhQb2RpYXRyeQxQcmltYXJ5IENhcmUOUHJvc3Rob2RvbnRpY3MKUHN5Y2hpYXRyeRZQc3ljaGlhdHJ5ICYgTmV1cm9sb2d5ClBzeWNob2xvZ3krUHVibGljIEhlYWx0aCAmIEdlbmVyYWwgUHJldmVudGl2ZSBNZWRpY2luZS1QdWJsaWMgSGVhbHRoIGFuZCBHZW5lcmFsIFByZXZlbnRpdmUgTWVkaWNpbmURUHVsbW9uYXJ5IERpc2Vhc2USUmFkaWF0aW9uIE9uY29sb2d5CVJhZGlvbG9neRNSYWRpb2xvZ3kgQXNzaXN0YW50GlJlcHJvZHVjdGl2ZSBFbmRvY3Jpbm9sb2d5JlJlcHJvZHVjdGl2ZSBFbmRvY3Jpbm9sb2d5L0luZmVydGlsaXR5DFJoZXVtYXRvbG9neQ5TbGVlcCBNZWRpY2luZQVTcGluZQ9TcG9ydHMgTWVkaWNpbmUHU3VyZ2VyeRNTdXJnZXJ5IG9mIHRoZSBIYW5kFlN1cmdpY2FsIENyaXRpY2FsIENhcmURU3VyZ2ljYWwgT25jb2xvZ3kMVGVsZW1lZGljaW5lFVRIRVJBUEVVVElDIFJBRElPTE9HWRxUaG9yYWNpYyBhbmQgQ2FyZGlhYyBTdXJnZXJ5EFRob3JhY2ljIFN1cmdlcnkSVXJnZW50IENhcmUgQ2VudGVyDVVyb2d5bmVjb2xvZ3kHVXJvbG9neSVWYXNjdWxhciBhbmQgSW50ZXJ2ZW50aW9uYWwgUmFkaW9sb2d5EVZhc2N1bGFyIE1lZGljaW5lElZhc2N1bGFyIE5ldXJvbG9neRBWYXNjdWxhciBTdXJnZXJ5CldvdW5kIENhcmUVrQEDQWxsABRBZGRpY3Rpb24gUHN5Y2hpYXRyeRNBZG9sZXNjZW50IE1lZGljaW5lIkFkdWx0ICYgUGVkaS4gQWxsZXJneSAmIEltbXVub2xvZ3kYQWR1bHQgSW5wYXRpZW50IE1lZGljaW5lFEFsbGVyZ3kgJiBJbW11bm9sb2d5FkFsbGVyZ3kgYW5kIEltbXVub2xvZ3knQW5hdG9taWMgUGF0aG9sb2d5ICYgQ2xpbmljYWwgUGF0aG9sb2d5DkFuZXN0aGVzaW9sb2d5HkFuZ2lvZ3JhcGh5ICYgSW50ZXJ2ZW50aW9uIFJhZBVCZWhhdmlvcmFsIFBlZGlhdHJpY3MKQ2FyZGlvbG9neRZDYXJkaW92YXNjdWxhciBEaXNlYXNlG0NlcnQuUmVnLiBOdXJzZSBBbmVzdGhldGlzdBdDZXJ0aWZpZWQgTnVyc2UgTWlkd2lmZRxDZXJ0aWZpZWQgTnVyc2UgUHJhY3RpdGlvbmVyF0NoaWxkICYgQWRvbGVzY2VudCBQc3kuH0NoaWxkIGFuZCBBZG9sZXNjZW50IFBzeWNoaWF0cnkdQ2xpbmljYWwgQmlvY2hlbWljYWwgR2VuZXRpY3MiQ2xpbmljYWwgQ2FyZGlhYyBFbGVjdHJvcGh5c2lvbG9neR5DbGluaWNhbCBHZW5ldGljcyBhbmQgR2Vub21pY3MUQ2xpbmljYWwgSW5mb3JtYXRpY3MYQ2xpbmljYWwgTmV1cm9waHlzaW9sb2d5EENsbmljYWwgR2VuZXRpY3MYQ29sb24gYW5kIFJlY3RhbCBTdXJnZXJ5FkNyaXRpY2FsIENhcmUgTWVkaWNpbmUNQ3l0b3BhdGhvbG9neQtEZXJtYXRvbG9neRBEZXJtYXRvcGF0aG9sb2d5I0RldmVsb3BtZW50YWwtQmVoYXZpb3JhbCBQZWRpYXRyaWNzFERpYWdub3N0aWMgUmFkaW9sb2d5EkVtZXJnZW5jeSBNZWRpY2luZQ1FbmRvY3Jpbm9sb2d5JkVuZG9jcmlub2xvZ3ksIERpYWJldGVzIGFuZCBNZXRhYm9saXNtFkVuZG9jcmlub2xvZ3kvRGlhYmV0ZXMIRXBpbGVwc3kPRmFtaWx5IE1lZGljaW5lMUZlbWFsZSBQZWx2aWMgTWVkaWNpbmUgYW5kIFJlY29uc3RydWN0aXZlIFN1cmdlcnkWRm9vdCBhbmQgQW5rbGUgU3VyZ2VyeRNGb3JlbnNpYyBQc3ljaGlhdHJ5EEdhc3Ryb2VudGVyb2xvZ3kZR2VuZXJhbCBJbnRlcm5hbCBNZWRpY2luZQ9HZW5lcmFsIFN1cmdlcnkIR2VuZXRpY3MSR2VyaWF0cmljIE1lZGljaW5lFEdlcmlhdHJpYyBQc3ljaGlhdHJ5FEd5bmVjb2xvZ2ljIE9uY29sb2d5Ckd5bmVjb2xvZ3kMSGFuZCBTdXJnZXJ5FUhlYWQgYW5kIE5lY2sgU3VyZ2VyeQpIZW1hdG9sb2d5H0hvc3BpY2UgYW5kIFBhbGxpYXRpdmUgTWVkaWNpbmUZSS5NLiAtIFB1bG1vbmFyeSBEaXNlYXNlcwlJQ1UgQ292ZXISSW5mZWN0aW91cyBEaXNlYXNlHEludGVybmFsIE1lZCAtIENyaXRpY2FsIENhcmURSW50ZXJuYWwgTWVkaWNpbmUZSW50ZXJ2ZW50aW9uYWwgQ2FyZGlvbG9neRhJbnRlcnZlbnRpb25hbCBSYWRpb2xvZ3kdTGljLiBJbmRlcC4gQ2xpbi4gU29jLiBXb3JrZXIXTWF0ZXJuYWwvRmV0YWwgTWVkaWNpbmUXTWF0ZXJuYWwtRmV0YWwgTWVkaWNpbmUQTWVkaWNhbCBPbmNvbG9neRJNZWRpY2FsIFRveGljb2xvZ3kITWVkaWNpbmUbTmVvbmF0YWwtUGVyaW5hdGFsIE1lZGljaW5lC05lb25hdG9sb2d5Ck5lcGhyb2xvZ3kfTmV1cm9kZXZlbG9wbWVudGFsIERpc2FiaWxpdGllcxROZXVyb2xvZ2ljYWwgU3VyZ2VyeQlOZXVyb2xvZ3k4TmV1cm9sb2d5IHdpdGggU3BlY2lhbCBRdWFsaWZpY2F0aW9ucyBpbiBDaGlsZCBOZXVyb2xvZ3kWTmV1cm9tdXNjdWxhciBNZWRpY2luZRNOZXVyb3BoeXNpbyBNb25pdG9yDk5ldXJvcmFkaW9sb2d5DE5ldXJvc3VyZ2VyeRBOdWNsZWFyIE1lZGljaW5lEU51Y2xlYXIgUmFkaW9sb2d5E051cnNlIFByYWN0aXRpb25lcnMHTnVyc2luZxdPYnN0ZXRyaWNzIC0gR3luZWNvbG9neRdPYnN0ZXRyaWNzICYgR3luZWNvbG9neRVPY2N1cGF0aW9uYWwgTWVkaWNpbmUTT25jb2xvZ3kvSGVtYXRvbG9neQ1PcGh0aGFsbW9sb2d5Gk9yYWwgJiBNYXhpbGxvZmFjaWFsIFN1cmcuHE9yYWwgJiBNYXhpbGxvZmFjaWFsIFN1cmdlcnkbT3J0aG9wYWVkaWMgU3BvcnRzIE1lZGljaW5lE09ydGhvcGFlZGljIFN1cmdlcnkMT3J0aG9wYWVkaWNzDk90b2xhcnluZ29sb2d5D1BhaW4gTWFuYWdlbWVudA1QYWluIE1lZGljaW5lHlBhaW4gTWVkaWNpbmUgLSBBbmVzdGhlc2lvbG9neRRQYWluIE1lZGljaW5lIC0gUE0mUg9QYWxsaWF0aXZlIENhcmUJUGF0aG9sb2d5GVBhdGhvbG9neSBSZWNlcnRpZmljYXRpb24SUGF0aG9sb2d5LUFuYXRvbWljFFBhdGhvbG9neS1IZW1hdG9sb2d5FFBlZGkgJiBBZHVsdCBBbGxlcmd5GVBFREkuIEhFTUFUT0xPR1ktT05DT0xPR1kRUGVkaWF0cmljIEFsbGVyZ3kgUGVkaWF0cmljIEFsbGVyZ3kgYW5kIEltbXVub2xvZ3kYUGVkaWF0cmljIEFuZXN0aGVzaW9sb2d5FFBlZGlhdHJpYyBDYXJkaW9sb2d5IFBlZGlhdHJpYyBDcml0aWNhbCBDYXJlIE1lZGljaW5lFVBlZGlhdHJpYyBEZXJtYXRvbG9neRNQZWRpYXRyaWMgRW1lcmdlbmN5HFBlZGlhdHJpYyBFbWVyZ2VuY3kgTWVkaWNpbmUXUGVkaWF0cmljIEVuZG9jcmlub2xvZ3kaUGVkaWF0cmljIEdhc3Ryb2VudGVyb2xvZ3kdUGVkaWF0cmljIEhlbWF0b2xvZ3kvT25jb2xvZ3kdUGVkaWF0cmljIEhlbWF0b2xvZ3ktT25jb2xvZ3kVUGVkaWF0cmljIEhvc3BpdGFsaXN0HFBlZGlhdHJpYyBJbmZlY3Rpb3VzIERpc2Vhc2UdUGVkaWF0cmljIEluZmVjdGlvdXMgRGlzZWFzZXMUUGVkaWF0cmljIE5lcGhyb2xvZ3kTUGVkaWF0cmljIE5ldXJvbG9neRdQZWRpYXRyaWMgT3BodGhhbG1vbG9neRZQZWRpYXRyaWMgT3J0aG9wYWVkaWNzGFBlZGlhdHJpYyBPdG9sYXJ5bmdvbG9neRVQZWRpYXRyaWMgUHVsbW9ub2xvZ3kTUGVkaWF0cmljIFJhZGlvbG9neRZQZWRpYXRyaWMgUmhldW1hdG9sb2d5EVBlZGlhdHJpYyBTdXJnZXJ5EVBlZGlhdHJpYyBVcm9sb2d5ClBlZGlhdHJpY3MeUGVkaWF0cmljcyBIZW1hdG9sb2d5L09uY29sb2d5HlBlZGlhdHJpY3MvQWRvbGVzY2VudCBNZWRpY2luZRNQZWRpYXRyaWNzL0dlbmV0aWNzClBoYXJtYWNpc3QWUGh5c2ljYWwgTWVkLiAmIFJlaGFiLhlQaHlzaWNhbCBNZWRpY2luZSAmIFJlaGFiIlBoeXNpY2FsIE1lZGljaW5lICYgUmVoYWJpbGl0YXRpb24kUGh5c2ljYWwgTWVkaWNpbmUgYW5kIFJlaGFiaWxpdGF0aW9uE1BoeXNpY2lhbiBBc3Npc3RhbnQPUGxhc3RpYyBTdXJnZXJ5CFBvZGlhdHJ5DFByaW1hcnkgQ2FyZQ5Qcm9zdGhvZG9udGljcwpQc3ljaGlhdHJ5FlBzeWNoaWF0cnkgJiBOZXVyb2xvZ3kKUHN5Y2hvbG9neStQdWJsaWMgSGVhbHRoICYgR2VuZXJhbCBQcmV2ZW50aXZlIE1lZGljaW5lLVB1YmxpYyBIZWFsdGggYW5kIEdlbmVyYWwgUHJldmVudGl2ZSBNZWRpY2luZRFQdWxtb25hcnkgRGlzZWFzZRJSYWRpYXRpb24gT25jb2xvZ3kJUmFkaW9sb2d5E1JhZGlvbG9neSBBc3Npc3RhbnQaUmVwcm9kdWN0aXZlIEVuZG9jcmlub2xvZ3kmUmVwcm9kdWN0aXZlIEVuZG9jcmlub2xvZ3kvSW5mZXJ0aWxpdHkMUmhldW1hdG9sb2d5DlNsZWVwIE1lZGljaW5lBVNwaW5lD1Nwb3J0cyBNZWRpY2luZQdTdXJnZXJ5E1N1cmdlcnkgb2YgdGhlIEhhbmQWU3VyZ2ljYWwgQ3JpdGljYWwgQ2FyZRFTdXJnaWNhbCBPbmNvbG9neQxUZWxlbWVkaWNpbmUVVEhFUkFQRVVUSUMgUkFESU9MT0dZHFRob3JhY2ljIGFuZCBDYXJkaWFjIFN1cmdlcnkQVGhvcmFjaWMgU3VyZ2VyeRJVcmdlbnQgQ2FyZSBDZW50ZXINVXJvZ3luZWNvbG9neQdVcm9sb2d5JVZhc2N1bGFyIGFuZCBJbnRlcnZlbnRpb25hbCBSYWRpb2xvZ3kRVmFzY3VsYXIgTWVkaWNpbmUSVmFzY3VsYXIgTmV1cm9sb2d5EFZhc2N1bGFyIFN1cmdlcnkKV291bmQgQ2FyZRQrA60BZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dkZAIPDxAPFgIfBmdkDxZGAgECAgIDAgQCBQIGAgcCCAIJAgoCCwIMAg0CDgIPAhACEQISAhMCFAIVAhYCFwIYAhkCGgIbAhwCHQIeAh8CIAIhAiICIwIkAiUCJgInAigCKQIqAisCLAItAi4CLwIwAjECMgIzAjQCNQI2AjcCOAI5AjoCOwI8Aj0CPgI/AkACQQJCAkMCRAJFAkYWRhAFBUFjdG9uBQVBY3RvbmcQBQlBcmxpbmd0b24FCUFybGluZ3RvbmcQBQZBdWJ1cm4FBkF1YnVybmcQBQdCZWxtb250BQdCZWxtb250ZxAFBkJvc3RvbgUGQm9zdG9uZxAFCUJyYWludHJlZQUJQnJhaW50cmVlZxAFCEJyb2NrdG9uBQhCcm9ja3RvbmcQBQlCcm9va2xpbmUFCUJyb29rbGluZWcQBQpCdXJsaW5ndG9uBQpCdXJsaW5ndG9uZxAFCUNhbWJyaWRnZQUJQ2FtYnJpZGdlZxAFCkNoZWxtc2ZvcmQFCkNoZWxtc2ZvcmRnEAUOQ2hlc3RudXQgIEhpbGwFDkNoZXN0bnV0ICBIaWxsZxAFCENvbHVtYmlhBQhDb2x1bWJpYWcQBQdDb25jb3JkBQdDb25jb3JkZxAFB0RhbnZlcnMFB0RhbnZlcnNnEAUGRGVkaGFtBQZEZWRoYW1nEAULRWFzdGJvcm91Z2gFC0Vhc3Rib3JvdWdoZxAFB0V2ZXJldHQFB0V2ZXJldHRnEAUKRm94Ym9yb3VnaAUKRm94Ym9yb3VnaGcQBQpGcmFtaW5naGFtBQpGcmFtaW5naGFtZxAFCEZyYW5rbGluBQhGcmFua2xpbmcQBQhIYW1pbHRvbgUISGFtaWx0b25nEAUJSGF2ZXJoaWxsBQlIYXZlcmhpbGxnEAUISG9wZWRhbGUFCEhvcGVkYWxlZxAFCUhvcGtpbnRvbgUJSG9wa2ludG9uZxAFB0xlYmFub24FB0xlYmFub25nEAUKTGVvbWluc3RlcgUKTGVvbWluc3RlcmcQBQlMZXhpbmd0b24FCUxleGluZ3RvbmcQBQRMeW5uBQRMeW5uZxAFC01hcmxib3JvdWdoBQtNYXJsYm9yb3VnaGcQBQhNZWRmaWVsZAUITWVkZmllbGRnEAUHTWVkZm9yZAUHTWVkZm9yZGcQBQdNZWxyb3NlBQdNZWxyb3NlZxAFB01pbGZvcmQFB01pbGZvcmRnEAUGTWlsdG9uBQZNaWx0b25nEAUJTmFudHVja2V0BQlOYW50dWNrZXRnEAUGTmFzaHVhBQZOYXNodWFnEAUJTmFzaHZpbGxlBQlOYXNodmlsbGVnEAUGTmF0aWNrBQZOYXRpY2tnEAUHTmVlZGhhbQUHTmVlZGhhbWcQBQhOZXcgWW9yawUITmV3IFlvcmtnEAUGTmV3dG9uBQZOZXd0b25nEAUNTm9ydGggQW5kb3ZlcgUNTm9ydGggQW5kb3ZlcmcQBQtOb3J0aGFtcHRvbgULTm9ydGhhbXB0b25nEAUMTm9ydGhib3JvdWdoBQxOb3J0aGJvcm91Z2hnEAUHTm9yd2VsbAUHTm9yd2VsbGcQBQdOb3J3b29kBQdOb3J3b29kZxAFCFBlbWJyb2tlBQhQZW1icm9rZWcQBQpQcm92aWRlbmNlBQpQcm92aWRlbmNlZxAFBlF1aW5jeQUGUXVpbmN5ZxAFB1JheW5oYW0FB1JheW5oYW1nEAUGUmV2ZXJlBQZSZXZlcmVnEAUFU2FsZW0FBVNhbGVtZxAFDFNvdXRoYm9yb3VnaAUMU291dGhib3JvdWdoZxAFB1N1ZGJ1cnkFB1N1ZGJ1cnlnEAUHVGF1bnRvbgUHVGF1bnRvbmcQBQlXYWtlZmllbGQFCVdha2VmaWVsZGcQBQdXYWxwb2xlBQdXYWxwb2xlZxAFB1dhbHRoYW0FB1dhbHRoYW1nEAUJV2F0ZXJ0b3duBQlXYXRlcnRvd25nEAUHV2F5bGFuZAUHV2F5bGFuZGcQBQlXZWxsZXNsZXkFCVdlbGxlc2xleWcQBQtXZXN0Ym9yb3VnaAULV2VzdGJvcm91Z2hnEAUJV2VzdGZpZWxkBQlXZXN0ZmllbGRnEAUGV2VzdG9uBQZXZXN0b25nEAUIV2VzdHdvb2QFCFdlc3R3b29kZxAFCFdleW1vdXRoBQhXZXltb3V0aGcQBQpXaW5jaGVzdGVyBQpXaW5jaGVzdGVyZxAFBldvYnVybgUGV29idXJuZxAFCVdvcmNlc3RlcgUJV29yY2VzdGVyZ2RkAgUPFgIfBGhkAgcPFgIfBGcWCAIBDw8WAh8BBQQxMDk4ZGQCBQ8QZGQWAQIDZAIHDxYCHwMCMhZkZg9kFhACAw9kFgICAQ8PFgIeCEltYWdlVXJsBSYvbWVkaWEvUGh5c2ljaWFuUGhvdG9zL0FiYm90dF9Ub2RkLmpwZ2RkAgUPDxYCHg9Db21tYW5kQXJndW1lbnQFBDE3MDBkFgJmD2QWAmYPFQESQWJib3R0LCBUb2RkIEUuIE1EZAIHD2QWAgIBDw8WAh8BBTRQYXRob2xvZ3k8YnIgLz5DeXRvcGF0aG9sb2d5PGJyIC8+UGF0aG9sb2d5LUFuYXRvbWljZGQCCQ8PFgIfBGhkZAINDw8WAh8EaGRkAg8PDxYCHwRoZGQCEQ8PFgIfDwUEMTcwMGRkAhMPFgIfAwIBFgJmD2QWCAIBDxYCHwRoZAIDD2QWAmYPFQEZTmV3dG9uLVdlbGxlc2xleSBIb3NwaXRhbGQCBQ9kFgQCAQ8WAh8EaGQCAw8WAh8IBXJodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvZGlyL0N1cnJlbnQrTG9jYXRpb24vRGVwdCtvZitQYXRob2xvZ3klMGQlMGEyMDE0K1dhc2hpbmd0b24rU3QlMGQlMGFOZXd0b24lMmMrTUErMDI0NjIWAmYPFQE9RGVwdCBvZiBQYXRob2xvZ3k8YnIvPjIwMTQgV2FzaGluZ3RvbiBTdDxici8+TmV3dG9uLCBNQSAwMjQ2MmQCBg8VBA0oNjE3KTI0My02MTQwDSg2MTcpMjQzLTYxNDAN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NzgxKTY0Ny02NDExDSg3ODEpNjQ3LTY0MTFkAgkPZBYGAgEPDxYGHghDc3NDbGFzcwUWYnRuLXByZXYtbmV4dCBkaXNhYmxlZB4HRW5hYmxlZGgeBF8hU0ICAmRkAgMPFgIfAwIFFgpmD2QWAgIBD2QWAgIBDw8WCB8QBQxhY3RpdmUgZmlyc3QfDwUBMB8RaB8SAgJkFgJmDxUBATFkAgEPZBYCAgEPZBYCAgEPDxYCHw8FATFkFgJmDxUBATJkAgIPZBYCAgEPZBYCAgEPDxYCHw8FATJkFgJmDxUBATNkAgMPZBYCAgEPZBYCAgEPDxYCHw8FATNkFgJmDxUBATRkAgQPZBYCAgEPFgIfCQUVcGFnZS1idXR0b24taXRlbSBsYXN0FgICAQ8PFgYfEAUQcGFnZS1idXR0b24gbGFzdB8PBQE0HxICAmQWAmYPFQEBNWQCBQ8PFgQfEAUNYnRuLXByZXYtbmV4dB8SAgJkZAIDDw9kDxAWAWYWARYCHwVkFgECA2RkAggPZBYWAgEPDxYCHwRoZGQCAw8QZBAVAQ9TZWxlY3QgTGFuZ3VhZ2UVAQItMRQrAwFnFgFmZAIFDxBkZBYBZmQCBw8QZGQWAWZkAgsPEGQQFa0BEFNlbGVjdCBTcGVjaWFsdHkAFEFkZGljdGlvbiBQc3ljaGlhdHJ5E0Fkb2xlc2NlbnQgTWVkaWNpbmUiQWR1bHQgJiBQZWRpLiBBbGxlcmd5ICYgSW1tdW5vbG9neRhBZHVsdCBJbnBhdGllbnQgTWVkaWNpbmUUQWxsZXJneSAmIEltbXVub2xvZ3kWQWxsZXJneSBhbmQgSW1tdW5vbG9neSdBbmF0b21pYyBQYXRob2xvZ3kgJiBDbGluaWNhbCBQYXRob2xvZ3kOQW5lc3RoZXNpb2xvZ3keQW5naW9ncmFwaHkgJiBJbnRlcnZlbnRpb24gUmFkFUJlaGF2aW9yYWwgUGVkaWF0cmljcwpDYXJkaW9sb2d5FkNhcmRpb3Zhc2N1bGFyIERpc2Vhc2UbQ2VydC5SZWcuIE51cnNlIEFuZXN0aGV0aXN0F0NlcnRpZmllZCBOdXJzZSBNaWR3aWZlHENlcnRpZmllZCBOdXJzZSBQcmFjdGl0aW9uZXIXQ2hpbGQgJiBBZG9sZXNjZW50IFBzeS4fQ2hpbGQgYW5kIEFkb2xlc2NlbnQgUHN5Y2hpYXRyeR1DbGluaWNhbCBCaW9jaGVtaWNhbCBHZW5ldGljcyJDbGluaWNhbCBDYXJkaWFjIEVsZWN0cm9waHlzaW9sb2d5HkNsaW5pY2FsIEdlbmV0aWNzIGFuZCBHZW5vbWljcxRDbGluaWNhbCBJbmZvcm1hdGljcxhDbGluaWNhbCBOZXVyb3BoeXNpb2xvZ3kQQ2xuaWNhbCBHZW5ldGljcxhDb2xvbiBhbmQgUmVjdGFsIFN1cmdlcnkWQ3JpdGljYWwgQ2FyZSBNZWRpY2luZQ1DeXRvcGF0aG9sb2d5C0Rlcm1hdG9sb2d5EERlcm1hdG9wYXRob2xvZ3kjRGV2ZWxvcG1lbnRhbC1CZWhhdmlvcmFsIFBlZGlhdHJpY3MURGlhZ25vc3RpYyBSYWRpb2xvZ3kSRW1lcmdlbmN5IE1lZGljaW5lDUVuZG9jcmlub2xvZ3kmRW5kb2NyaW5vbG9neSwgRGlhYmV0ZXMgYW5kIE1ldGFib2xpc20WRW5kb2NyaW5vbG9neS9EaWFiZXRlcwhFcGlsZXBzeQ9GYW1pbHkgTWVkaWNpbmUxRmVtYWxlIFBlbHZpYyBNZWRpY2luZSBhbmQgUmVjb25zdHJ1Y3RpdmUgU3VyZ2VyeRZGb290IGFuZCBBbmtsZSBTdXJnZXJ5E0ZvcmVuc2ljIFBzeWNoaWF0cnkQR2FzdHJvZW50ZXJvbG9neRlHZW5lcmFsIEludGVybmFsIE1lZGljaW5lD0dlbmVyYWwgU3VyZ2VyeQhHZW5ldGljcxJHZXJpYXRyaWMgTWVkaWNpbmUUR2VyaWF0cmljIFBzeWNoaWF0cnkUR3luZWNvbG9naWMgT25jb2xvZ3kKR3luZWNvbG9neQxIYW5kIFN1cmdlcnkVSGVhZCBhbmQgTmVjayBTdXJnZXJ5CkhlbWF0b2xvZ3kfSG9zcGljZSBhbmQgUGFsbGlhdGl2ZSBNZWRpY2luZRlJLk0uIC0gUHVsbW9uYXJ5IERpc2Vhc2VzCUlDVSBDb3ZlchJJbmZlY3Rpb3VzIERpc2Vhc2UcSW50ZXJuYWwgTWVkIC0gQ3JpdGljYWwgQ2FyZRFJbnRlcm5hbCBNZWRpY2luZRlJbnRlcnZlbnRpb25hbCBDYXJkaW9sb2d5GEludGVydmVudGlvbmFsIFJhZGlvbG9neR1MaWMuIEluZGVwLiBDbGluLiBTb2MuIFdvcmtlchdNYXRlcm5hbC9GZXRhbCBNZWRpY2luZRdNYXRlcm5hbC1GZXRhbCBNZWRpY2luZRBNZWRpY2FsIE9uY29sb2d5Ek1lZGljYWwgVG94aWNvbG9neQhNZWRpY2luZRtOZW9uYXRhbC1QZXJpbmF0YWwgTWVkaWNpbmULTmVvbmF0b2xvZ3kKTmVwaHJvbG9neR9OZXVyb2RldmVsb3BtZW50YWwgRGlzYWJpbGl0aWVzFE5ldXJvbG9naWNhbCBTdXJnZXJ5CU5ldXJvbG9neThOZXVyb2xvZ3kgd2l0aCBTcGVjaWFsIFF1YWxpZmljYXRpb25zIGluIENoaWxkIE5ldXJvbG9neRZOZXVyb211c2N1bGFyIE1lZGljaW5lE05ldXJvcGh5c2lvIE1vbml0b3IOTmV1cm9yYWRpb2xvZ3kMTmV1cm9zdXJnZXJ5EE51Y2xlYXIgTWVkaWNpbmURTnVjbGVhciBSYWRpb2xvZ3kTTnVyc2UgUHJhY3RpdGlvbmVycwdOdXJzaW5nF09ic3RldHJpY3MgLSBHeW5lY29sb2d5F09ic3RldHJpY3MgJiBHeW5lY29sb2d5FU9jY3VwYXRpb25hbCBNZWRpY2luZRNPbmNvbG9neS9IZW1hdG9sb2d5DU9waHRoYWxtb2xvZ3kaT3JhbCAmIE1heGlsbG9mYWNpYWwgU3VyZy4cT3JhbCAmIE1heGlsbG9mYWNpYWwgU3VyZ2VyeRtPcnRob3BhZWRpYyBTcG9ydHMgTWVkaWNpbmUTT3J0aG9wYWVkaWMgU3VyZ2VyeQxPcnRob3BhZWRpY3MOT3RvbGFyeW5nb2xvZ3kPUGFpbiBNYW5hZ2VtZW50DVBhaW4gTWVkaWNpbmUeUGFpbiBNZWRpY2luZSAtIEFuZXN0aGVzaW9sb2d5FFBhaW4gTWVkaWNpbmUgLSBQTSZSD1BhbGxpYXRpdmUgQ2FyZQlQYXRob2xvZ3kZUGF0aG9sb2d5IFJlY2VydGlmaWNhdGlvbhJQYXRob2xvZ3ktQW5hdG9taWMUUGF0aG9sb2d5LUhlbWF0b2xvZ3kUUGVkaSAmIEFkdWx0IEFsbGVyZ3kZUEVESS4gSEVNQVRPTE9HWS1PTkNPTE9HWRFQZWRpYXRyaWMgQWxsZXJneSBQZWRpYXRyaWMgQWxsZXJneSBhbmQgSW1tdW5vbG9neRhQZWRpYXRyaWMgQW5lc3RoZXNpb2xvZ3kUUGVkaWF0cmljIENhcmRpb2xvZ3kgUGVkaWF0cmljIENyaXRpY2FsIENhcmUgTWVkaWNpbmUVUGVkaWF0cmljIERlcm1hdG9sb2d5E1BlZGlhdHJpYyBFbWVyZ2VuY3kcUGVkaWF0cmljIEVtZXJnZW5jeSBNZWRpY2luZRdQZWRpYXRyaWMgRW5kb2NyaW5vbG9neRpQZWRpYXRyaWMgR2FzdHJvZW50ZXJvbG9neR1QZWRpYXRyaWMgSGVtYXRvbG9neS9PbmNvbG9neR1QZWRpYXRyaWMgSGVtYXRvbG9neS1PbmNvbG9neRVQZWRpYXRyaWMgSG9zcGl0YWxpc3QcUGVkaWF0cmljIEluZmVjdGlvdXMgRGlzZWFzZR1QZWRpYXRyaWMgSW5mZWN0aW91cyBEaXNlYXNlcxRQZWRpYXRyaWMgTmVwaHJvbG9neRNQZWRpYXRyaWMgTmV1cm9sb2d5F1BlZGlhdHJpYyBPcGh0aGFsbW9sb2d5FlBlZGlhdHJpYyBPcnRob3BhZWRpY3MYUGVkaWF0cmljIE90b2xhcnluZ29sb2d5FVBlZGlhdHJpYyBQdWxtb25vbG9neRNQZWRpYXRyaWMgUmFkaW9sb2d5FlBlZGlhdHJpYyBSaGV1bWF0b2xvZ3kRUGVkaWF0cmljIFN1cmdlcnkRUGVkaWF0cmljIFVyb2xvZ3kKUGVkaWF0cmljcx5QZWRpYXRyaWNzIEhlbWF0b2xvZ3kvT25jb2xvZ3keUGVkaWF0cmljcy9BZG9sZXNjZW50IE1lZGljaW5lE1BlZGlhdHJpY3MvR2VuZXRpY3MKUGhhcm1hY2lzdBZQaHlzaWNhbCBNZWQuICYgUmVoYWIuGVBoeXNpY2FsIE1lZGljaW5lICYgUmVoYWIiUGh5c2ljYWwgTWVkaWNpbmUgJiBSZWhhYmlsaXRhdGlvbiRQaHlzaWNhbCBNZWRpY2luZSBhbmQgUmVoYWJpbGl0YXRpb24TUGh5c2ljaWFuIEFzc2lzdGFudA9QbGFzdGljIFN1cmdlcnkIUG9kaWF0cnkMUHJpbWFyeSBDYXJlDlByb3N0aG9kb250aWNzClBzeWNoaWF0cnkWUHN5Y2hpYXRyeSAmIE5ldXJvbG9neQpQc3ljaG9sb2d5K1B1YmxpYyBIZWFsdGggJiBHZW5lcmFsIFByZXZlbnRpdmUgTWVkaWNpbmUtUHVibGljIEhlYWx0aCBhbmQgR2VuZXJhbCBQcmV2ZW50aXZlIE1lZGljaW5lEVB1bG1vbmFyeSBEaXNlYXNlElJhZGlhdGlvbiBPbmNvbG9neQlSYWRpb2xvZ3kTUmFkaW9sb2d5IEFzc2lzdGFudBpSZXByb2R1Y3RpdmUgRW5kb2NyaW5vbG9neSZSZXByb2R1Y3RpdmUgRW5kb2NyaW5vbG9neS9JbmZlcnRpbGl0eQxSaGV1bWF0b2xvZ3kOU2xlZXAgTWVkaWNpbmUFU3BpbmUPU3BvcnRzIE1lZGljaW5lB1N1cmdlcnkTU3VyZ2VyeSBvZiB0aGUgSGFuZBZTdXJnaWNhbCBDcml0aWNhbCBDYXJlEVN1cmdpY2FsIE9uY29sb2d5DFRlbGVtZWRpY2luZRVUSEVSQVBFVVRJQyBSQURJT0xPR1kcVGhvcmFjaWMgYW5kIENhcmRpYWMgU3VyZ2VyeRBUaG9yYWNpYyBTdXJnZXJ5ElVyZ2VudCBDYXJlIENlbnRlcg1Vcm9neW5lY29sb2d5B1Vyb2xvZ3klVmFzY3VsYXIgYW5kIEludGVydmVudGlvbmFsIFJhZGlvbG9neRFWYXNjdWxhciBNZWRpY2luZRJWYXNjdWxhciBOZXVyb2xvZ3kQVmFzY3VsYXIgU3VyZ2VyeQpXb3VuZCBDYXJlFa0BA0FsbAAUQWRkaWN0aW9uIFBzeWNoaWF0cnkTQWRvbGVzY2VudCBNZWRpY2luZSJBZHVsdCAmIFBlZGkuIEFsbGVyZ3kgJiBJbW11bm9sb2d5GEFkdWx0IElucGF0aWVudCBNZWRpY2luZRRBbGxlcmd5ICYgSW1tdW5vbG9neRZBbGxlcmd5IGFuZCBJbW11bm9sb2d5J0FuYXRvbWljIFBhdGhvbG9neSAmIENsaW5pY2FsIFBhdGhvbG9neQ5BbmVzdGhlc2lvbG9neR5Bbmdpb2dyYXBoeSAmIEludGVydmVudGlvbiBSYWQVQmVoYXZpb3JhbCBQZWRpYXRyaWNzCkNhcmRpb2xvZ3kWQ2FyZGlvdmFzY3VsYXIgRGlzZWFzZRtDZXJ0LlJlZy4gTnVyc2UgQW5lc3RoZXRpc3QXQ2VydGlmaWVkIE51cnNlIE1pZHdpZmUcQ2VydGlmaWVkIE51cnNlIFByYWN0aXRpb25lchdDaGlsZCAmIEFkb2xlc2NlbnQgUHN5Lh9DaGlsZCBhbmQgQWRvbGVzY2VudCBQc3ljaGlhdHJ5HUNsaW5pY2FsIEJpb2NoZW1pY2FsIEdlbmV0aWNzIkNsaW5pY2FsIENhcmRpYWMgRWxlY3Ryb3BoeXNpb2xvZ3keQ2xpbmljYWwgR2VuZXRpY3MgYW5kIEdlbm9taWNzFENsaW5pY2FsIEluZm9ybWF0aWNzGENsaW5pY2FsIE5ldXJvcGh5c2lvbG9neRBDbG5pY2FsIEdlbmV0aWNzGENvbG9uIGFuZCBSZWN0YWwgU3VyZ2VyeRZDcml0aWNhbCBDYXJlIE1lZGljaW5lDUN5dG9wYXRob2xvZ3kLRGVybWF0b2xvZ3kQRGVybWF0b3BhdGhvbG9neSNEZXZlbG9wbWVudGFsLUJlaGF2aW9yYWwgUGVkaWF0cmljcxREaWFnbm9zdGljIFJhZGlvbG9neRJFbWVyZ2VuY3kgTWVkaWNpbmUNRW5kb2NyaW5vbG9neSZFbmRvY3Jpbm9sb2d5LCBEaWFiZXRlcyBhbmQgTWV0YWJvbGlzbRZFbmRvY3Jpbm9sb2d5L0RpYWJldGVzCEVwaWxlcHN5D0ZhbWlseSBNZWRpY2luZTFGZW1hbGUgUGVsdmljIE1lZGljaW5lIGFuZCBSZWNvbnN0cnVjdGl2ZSBTdXJnZXJ5FkZvb3QgYW5kIEFua2xlIFN1cmdlcnkTRm9yZW5zaWMgUHN5Y2hpYXRyeRBHYXN0cm9lbnRlcm9sb2d5GUdlbmVyYWwgSW50ZXJuYWwgTWVkaWNpbmUPR2VuZXJhbCBTdXJnZXJ5CEdlbmV0aWNzEkdlcmlhdHJpYyBNZWRpY2luZRRHZXJpYXRyaWMgUHN5Y2hpYXRyeRRHeW5lY29sb2dpYyBPbmNvbG9neQpHeW5lY29sb2d5DEhhbmQgU3VyZ2VyeRVIZWFkIGFuZCBOZWNrIFN1cmdlcnkKSGVtYXRvbG9neR9Ib3NwaWNlIGFuZCBQYWxsaWF0aXZlIE1lZGljaW5lGUkuTS4gLSBQdWxtb25hcnkgRGlzZWFzZXMJSUNVIENvdmVyEkluZmVjdGlvdXMgRGlzZWFzZRxJbnRlcm5hbCBNZWQgLSBDcml0aWNhbCBDYXJlEUludGVybmFsIE1lZGljaW5lGUludGVydmVudGlvbmFsIENhcmRpb2xvZ3kYSW50ZXJ2ZW50aW9uYWwgUmFkaW9sb2d5HUxpYy4gSW5kZXAuIENsaW4uIFNvYy4gV29ya2VyF01hdGVybmFsL0ZldGFsIE1lZGljaW5lF01hdGVybmFsLUZldGFsIE1lZGljaW5lEE1lZGljYWwgT25jb2xvZ3kSTWVkaWNhbCBUb3hpY29sb2d5CE1lZGljaW5lG05lb25hdGFsLVBlcmluYXRhbCBNZWRpY2luZQtOZW9uYXRvbG9neQpOZXBocm9sb2d5H05ldXJvZGV2ZWxvcG1lbnRhbCBEaXNhYmlsaXRpZXMUTmV1cm9sb2dpY2FsIFN1cmdlcnkJTmV1cm9sb2d5OE5ldXJvbG9neSB3aXRoIFNwZWNpYWwgUXVhbGlmaWNhdGlvbnMgaW4gQ2hpbGQgTmV1cm9sb2d5Fk5ldXJvbXVzY3VsYXIgTWVkaWNpbmUTTmV1cm9waHlzaW8gTW9uaXRvcg5OZXVyb3JhZGlvbG9neQxOZXVyb3N1cmdlcnkQTnVjbGVhciBNZWRpY2luZRFOdWNsZWFyIFJhZGlvbG9neRNOdXJzZSBQcmFjdGl0aW9uZXJzB051cnNpbmcXT2JzdGV0cmljcyAtIEd5bmVjb2xvZ3kXT2JzdGV0cmljcyAmIEd5bmVjb2xvZ3kVT2NjdXBhdGlvbmFsIE1lZGljaW5lE09uY29sb2d5L0hlbWF0b2xvZ3kNT3BodGhhbG1vbG9neRpPcmFsICYgTWF4aWxsb2ZhY2lhbCBTdXJnLhxPcmFsICYgTWF4aWxsb2ZhY2lhbCBTdXJnZXJ5G09ydGhvcGFlZGljIFNwb3J0cyBNZWRpY2luZRNPcnRob3BhZWRpYyBTdXJnZXJ5DE9ydGhvcGFlZGljcw5PdG9sYXJ5bmdvbG9neQ9QYWluIE1hbmFnZW1lbnQNUGFpbiBNZWRpY2luZR5QYWluIE1lZGljaW5lIC0gQW5lc3RoZXNpb2xvZ3kUUGFpbiBNZWRpY2luZSAtIFBNJlIPUGFsbGlhdGl2ZSBDYXJlCVBhdGhvbG9neRlQYXRob2xvZ3kgUmVjZXJ0aWZpY2F0aW9uElBhdGhvbG9neS1BbmF0b21pYxRQYXRob2xvZ3ktSGVtYXRvbG9neRRQZWRpICYgQWR1bHQgQWxsZXJneRlQRURJLiBIRU1BVE9MT0dZLU9OQ09MT0dZEVBlZGlhdHJpYyBBbGxlcmd5IFBlZGlhdHJpYyBBbGxlcmd5IGFuZCBJbW11bm9sb2d5GFBlZGlhdHJpYyBBbmVzdGhlc2lvbG9neRRQZWRpYXRyaWMgQ2FyZGlvbG9neSBQZWRpYXRyaWMgQ3JpdGljYWwgQ2FyZSBNZWRpY2luZRVQZWRpYXRyaWMgRGVybWF0b2xvZ3kTUGVkaWF0cmljIEVtZXJnZW5jeRxQZWRpYXRyaWMgRW1lcmdlbmN5IE1lZGljaW5lF1BlZGlhdHJpYyBFbmRvY3Jpbm9sb2d5GlBlZGlhdHJpYyBHYXN0cm9lbnRlcm9sb2d5HVBlZGlhdHJpYyBIZW1hdG9sb2d5L09uY29sb2d5HVBlZGlhdHJpYyBIZW1hdG9sb2d5LU9uY29sb2d5FVBlZGlhdHJpYyBIb3NwaXRhbGlzdBxQZWRpYXRyaWMgSW5mZWN0aW91cyBEaXNlYXNlHVBlZGlhdHJpYyBJbmZlY3Rpb3VzIERpc2Vhc2VzFFBlZGlhdHJpYyBOZXBocm9sb2d5E1BlZGlhdHJpYyBOZXVyb2xvZ3kXUGVkaWF0cmljIE9waHRoYWxtb2xvZ3kWUGVkaWF0cmljIE9ydGhvcGFlZGljcxhQZWRpYXRyaWMgT3RvbGFyeW5nb2xvZ3kVUGVkaWF0cmljIFB1bG1vbm9sb2d5E1BlZGlhdHJpYyBSYWRpb2xvZ3kWUGVkaWF0cmljIFJoZXVtYXRvbG9neRFQZWRpYXRyaWMgU3VyZ2VyeRFQZWRpYXRyaWMgVXJvbG9neQpQZWRpYXRyaWNzHlBlZGlhdHJpY3MgSGVtYXRvbG9neS9PbmNvbG9neR5QZWRpYXRyaWNzL0Fkb2xlc2NlbnQgTWVkaWNpbmUTUGVkaWF0cmljcy9HZW5ldGljcwpQaGFybWFjaXN0FlBoeXNpY2FsIE1lZC4gJiBSZWhhYi4ZUGh5c2ljYWwgTWVkaWNpbmUgJiBSZWhhYiJQaHlzaWNhbCBNZWRpY2luZSAmIFJlaGFiaWxpdGF0aW9uJFBoeXNpY2FsIE1lZGljaW5lIGFuZCBSZWhhYmlsaXRhdGlvbhNQaHlzaWNpYW4gQXNzaXN0YW50D1BsYXN0aWMgU3VyZ2VyeQhQb2RpYXRyeQxQcmltYXJ5IENhcmUOUHJvc3Rob2RvbnRpY3MKUHN5Y2hpYXRyeRZQc3ljaGlhdHJ5ICYgTmV1cm9sb2d5ClBzeWNob2xvZ3krUHVibGljIEhlYWx0aCAmIEdlbmVyYWwgUHJldmVudGl2ZSBNZWRpY2luZS1QdWJsaWMgSGVhbHRoIGFuZCBHZW5lcmFsIFByZXZlbnRpdmUgTWVkaWNpbmURUHVsbW9uYXJ5IERpc2Vhc2USUmFkaWF0aW9uIE9uY29sb2d5CVJhZGlvbG9neRNSYWRpb2xvZ3kgQXNzaXN0YW50GlJlcHJvZHVjdGl2ZSBFbmRvY3Jpbm9sb2d5JlJlcHJvZHVjdGl2ZSBFbmRvY3Jpbm9sb2d5L0luZmVydGlsaXR5DFJoZXVtYXRvbG9neQ5TbGVlcCBNZWRpY2luZQVTcGluZQ9TcG9ydHMgTWVkaWNpbmUHU3VyZ2VyeRNTdXJnZXJ5IG9mIHRoZSBIYW5kFlN1cmdpY2FsIENyaXRpY2FsIENhcmURU3VyZ2ljYWwgT25jb2xvZ3kMVGVsZW1lZGljaW5lFVRIRVJBUEVVVElDIFJBRElPTE9HWRxUaG9yYWNpYyBhbmQgQ2FyZGlhYyBTdXJnZXJ5EFRob3JhY2ljIFN1cmdlcnkSVXJnZW50IENhcmUgQ2VudGVyDVVyb2d5bmVjb2xvZ3kHVXJvbG9neSVWYXNjdWxhciBhbmQgSW50ZXJ2ZW50aW9uYWwgUmFkaW9sb2d5EVZhc2N1bGFyIE1lZGljaW5lElZhc2N1bGFyIE5ldXJvbG9neRBWYXNjdWxhciBTdXJnZXJ5CldvdW5kIENhcmUUKwOtAWdnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnFgFmZAINDw8WAh8BZWRkAhEPEGQQFQEPU2VsZWN0IExhbmd1YWdlFQECLTEUKwMBZxYBZmQCEw8PFgIfBGhkZAIXDxAPFgIeB0NoZWNrZWRoZGRkZAIdDxBkEBWtARBTZWxlY3QgU3BlY2lhbHR5ABRBZGRpY3Rpb24gUHN5Y2hpYXRyeRNBZG9sZXNjZW50IE1lZGljaW5lIkFkdWx0ICYgUGVkaS4gQWxsZXJneSAmIEltbXVub2xvZ3kYQWR1bHQgSW5wYXRpZW50IE1lZGljaW5lFEFsbGVyZ3kgJiBJbW11bm9sb2d5FkFsbGVyZ3kgYW5kIEltbXVub2xvZ3knQW5hdG9taWMgUGF0aG9sb2d5ICYgQ2xpbmljYWwgUGF0aG9sb2d5DkFuZXN0aGVzaW9sb2d5HkFuZ2lvZ3JhcGh5ICYgSW50ZXJ2ZW50aW9uIFJhZBVCZWhhdmlvcmFsIFBlZGlhdHJpY3MKQ2FyZGlvbG9neRZDYXJkaW92YXNjdWxhciBEaXNlYXNlG0NlcnQuUmVnLiBOdXJzZSBBbmVzdGhldGlzdBdDZXJ0aWZpZWQgTnVyc2UgTWlkd2lmZRxDZXJ0aWZpZWQgTnVyc2UgUHJhY3RpdGlvbmVyF0NoaWxkICYgQWRvbGVzY2VudCBQc3kuH0NoaWxkIGFuZCBBZG9sZXNjZW50IFBzeWNoaWF0cnkdQ2xpbmljYWwgQmlvY2hlbWljYWwgR2VuZXRpY3MiQ2xpbmljYWwgQ2FyZGlhYyBFbGVjdHJvcGh5c2lvbG9neR5DbGluaWNhbCBHZW5ldGljcyBhbmQgR2Vub21pY3MUQ2xpbmljYWwgSW5mb3JtYXRpY3MYQ2xpbmljYWwgTmV1cm9waHlzaW9sb2d5EENsbmljYWwgR2VuZXRpY3MYQ29sb24gYW5kIFJlY3RhbCBTdXJnZXJ5FkNyaXRpY2FsIENhcmUgTWVkaWNpbmUNQ3l0b3BhdGhvbG9neQtEZXJtYXRvbG9neRBEZXJtYXRvcGF0aG9sb2d5I0RldmVsb3BtZW50YWwtQmVoYXZpb3JhbCBQZWRpYXRyaWNzFERpYWdub3N0aWMgUmFkaW9sb2d5EkVtZXJnZW5jeSBNZWRpY2luZQ1FbmRvY3Jpbm9sb2d5JkVuZG9jcmlub2xvZ3ksIERpYWJldGVzIGFuZCBNZXRhYm9saXNtFkVuZG9jcmlub2xvZ3kvRGlhYmV0ZXMIRXBpbGVwc3kPRmFtaWx5IE1lZGljaW5lMUZlbWFsZSBQZWx2aWMgTWVkaWNpbmUgYW5kIFJlY29uc3RydWN0aXZlIFN1cmdlcnkWRm9vdCBhbmQgQW5rbGUgU3VyZ2VyeRNGb3JlbnNpYyBQc3ljaGlhdHJ5EEdhc3Ryb2VudGVyb2xvZ3kZR2VuZXJhbCBJbnRlcm5hbCBNZWRpY2luZQ9HZW5lcmFsIFN1cmdlcnkIR2VuZXRpY3MSR2VyaWF0cmljIE1lZGljaW5lFEdlcmlhdHJpYyBQc3ljaGlhdHJ5FEd5bmVjb2xvZ2ljIE9uY29sb2d5Ckd5bmVjb2xvZ3kMSGFuZCBTdXJnZXJ5FUhlYWQgYW5kIE5lY2sgU3VyZ2VyeQpIZW1hdG9sb2d5H0hvc3BpY2UgYW5kIFBhbGxpYXRpdmUgTWVkaWNpbmUZSS5NLiAtIFB1bG1vbmFyeSBEaXNlYXNlcwlJQ1UgQ292ZXISSW5mZWN0aW91cyBEaXNlYXNlHEludGVybmFsIE1lZCAtIENyaXRpY2FsIENhcmURSW50ZXJuYWwgTWVkaWNpbmUZSW50ZXJ2ZW50aW9uYWwgQ2FyZGlvbG9neRhJbnRlcnZlbnRpb25hbCBSYWRpb2xvZ3kdTGljLiBJbmRlcC4gQ2xpbi4gU29jLiBXb3JrZXIXTWF0ZXJuYWwvRmV0YWwgTWVkaWNpbmUXTWF0ZXJuYWwtRmV0YWwgTWVkaWNpbmUQTWVkaWNhbCBPbmNvbG9neRJNZWRpY2FsIFRveGljb2xvZ3kITWVkaWNpbmUbTmVvbmF0YWwtUGVyaW5hdGFsIE1lZGljaW5lC05lb25hdG9sb2d5Ck5lcGhyb2xvZ3kfTmV1cm9kZXZlbG9wbWVudGFsIERpc2FiaWxpdGllcxROZXVyb2xvZ2ljYWwgU3VyZ2VyeQlOZXVyb2xvZ3k4TmV1cm9sb2d5IHdpdGggU3BlY2lhbCBRdWFsaWZpY2F0aW9ucyBpbiBDaGlsZCBOZXVyb2xvZ3kWTmV1cm9tdXNjdWxhciBNZWRpY2luZRNOZXVyb3BoeXNpbyBNb25pdG9yDk5ldXJvcmFkaW9sb2d5DE5ldXJvc3VyZ2VyeRBOdWNsZWFyIE1lZGljaW5lEU51Y2xlYXIgUmFkaW9sb2d5E051cnNlIFByYWN0aXRpb25lcnMHTnVyc2luZxdPYnN0ZXRyaWNzIC0gR3luZWNvbG9neRdPYnN0ZXRyaWNzICYgR3luZWNvbG9neRVPY2N1cGF0aW9uYWwgTWVkaWNpbmUTT25jb2xvZ3kvSGVtYXRvbG9neQ1PcGh0aGFsbW9sb2d5Gk9yYWwgJiBNYXhpbGxvZmFjaWFsIFN1cmcuHE9yYWwgJiBNYXhpbGxvZmFjaWFsIFN1cmdlcnkbT3J0aG9wYWVkaWMgU3BvcnRzIE1lZGljaW5lE09ydGhvcGFlZGljIFN1cmdlcnkMT3J0aG9wYWVkaWNzDk90b2xhcnluZ29sb2d5D1BhaW4gTWFuYWdlbWVudA1QYWluIE1lZGljaW5lHlBhaW4gTWVkaWNpbmUgLSBBbmVzdGhlc2lvbG9neRRQYWluIE1lZGljaW5lIC0gUE0mUg9QYWxsaWF0aXZlIENhcmUJUGF0aG9sb2d5GVBhdGhvbG9neSBSZWNlcnRpZmljYXRpb24SUGF0aG9sb2d5LUFuYXRvbWljFFBhdGhvbG9neS1IZW1hdG9sb2d5FFBlZGkgJiBBZHVsdCBBbGxlcmd5GVBFREkuIEhFTUFUT0xPR1ktT05DT0xPR1kRUGVkaWF0cmljIEFsbGVyZ3kgUGVkaWF0cmljIEFsbGVyZ3kgYW5kIEltbXVub2xvZ3kYUGVkaWF0cmljIEFuZXN0aGVzaW9sb2d5FFBlZGlhdHJpYyBDYXJkaW9sb2d5IFBlZGlhdHJpYyBDcml0aWNhbCBDYXJlIE1lZGljaW5lFVBlZGlhdHJpYyBEZXJtYXRvbG9neRNQZWRpYXRyaWMgRW1lcmdlbmN5HFBlZGlhdHJpYyBFbWVyZ2VuY3kgTWVkaWNpbmUXUGVkaWF0cmljIEVuZG9jcmlub2xvZ3kaUGVkaWF0cmljIEdhc3Ryb2VudGVyb2xvZ3kdUGVkaWF0cmljIEhlbWF0b2xvZ3kvT25jb2xvZ3kdUGVkaWF0cmljIEhlbWF0b2xvZ3ktT25jb2xvZ3kVUGVkaWF0cmljIEhvc3BpdGFsaXN0HFBlZGlhdHJpYyBJbmZlY3Rpb3VzIERpc2Vhc2UdUGVkaWF0cmljIEluZmVjdGlvdXMgRGlzZWFzZXMUUGVkaWF0cmljIE5lcGhyb2xvZ3kTUGVkaWF0cmljIE5ldXJvbG9neRdQZWRpYXRyaWMgT3BodGhhbG1vbG9neRZQZWRpYXRyaWMgT3J0aG9wYWVkaWNzGFBlZGlhdHJpYyBPdG9sYXJ5bmdvbG9neRVQZWRpYXRyaWMgUHVsbW9ub2xvZ3kTUGVkaWF0cmljIFJhZGlvbG9neRZQZWRpYXRyaWMgUmhldW1hdG9sb2d5EVBlZGlhdHJpYyBTdXJnZXJ5EVBlZGlhdHJpYyBVcm9sb2d5ClBlZGlhdHJpY3MeUGVkaWF0cmljcyBIZW1hdG9sb2d5L09uY29sb2d5HlBlZGlhdHJpY3MvQWRvbGVzY2VudCBNZWRpY2luZRNQZWRpYXRyaWNzL0dlbmV0aWNzClBoYXJtYWNpc3QWUGh5c2ljYWwgTWVkLiAmIFJlaGFiLhlQaHlzaWNhbCBNZWRpY2luZSAmIFJlaGFiIlBoeXNpY2FsIE1lZGljaW5lICYgUmVoYWJpbGl0YXRpb24kUGh5c2ljYWwgTWVkaWNpbmUgYW5kIFJlaGFiaWxpdGF0aW9uE1BoeXNpY2lhbiBBc3Npc3RhbnQPUGxhc3RpYyBTdXJnZXJ5CFBvZGlhdHJ5DFByaW1hcnkgQ2FyZQ5Qcm9zdGhvZG9udGljcwpQc3ljaGlhdHJ5FlBzeWNoaWF0cnkgJiBOZXVyb2xvZ3kKUHN5Y2hvbG9neStQdWJsaWMgSGVhbHRoICYgR2VuZXJhbCBQcmV2ZW50aXZlIE1lZGljaW5lLVB1YmxpYyBIZWFsdGggYW5kIEdlbmVyYWwgUHJldmVudGl2ZSBNZWRpY2luZRFQdWxtb25hcnkgRGlzZWFzZRJSYWRpYXRpb24gT25jb2xvZ3kJUmFkaW9sb2d5E1JhZGlvbG9neSBBc3Npc3RhbnQaUmVwcm9kdWN0aXZlIEVuZG9jcmlub2xvZ3kmUmVwcm9kdWN0aXZlIEVuZG9jcmlub2xvZ3kvSW5mZXJ0aWxpdHkMUmhldW1hdG9sb2d5DlNsZWVwIE1lZGljaW5lBVNwaW5lD1Nwb3J0cyBNZWRpY2luZQdTdXJnZXJ5E1N1cmdlcnkgb2YgdGhlIEhhbmQWU3VyZ2ljYWwgQ3JpdGljYWwgQ2FyZRFTdXJnaWNhbCBPbmNvbG9neQxUZWxlbWVkaWNpbmUVVEhFUkFQRVVUSUMgUkFESU9MT0dZHFRob3JhY2ljIGFuZCBDYXJkaWFjIFN1cmdlcnkQVGhvcmFjaWMgU3VyZ2VyeRJVcmdlbnQgQ2FyZSBDZW50ZXINVXJvZ3luZWNvbG9neQdVcm9sb2d5JVZhc2N1bGFyIGFuZCBJbnRlcnZlbnRpb25hbCBSYWRpb2xvZ3kRVmFzY3VsYXIgTWVkaWNpbmUSVmFzY3VsYXIgTmV1cm9sb2d5EFZhc2N1bGFyIFN1cmdlcnkKV291bmQgQ2FyZRWtAQNBbGwAFEFkZGljdGlvbiBQc3ljaGlhdHJ5E0Fkb2xlc2NlbnQgTWVkaWNpbmUiQWR1bHQgJiBQZWRpLiBBbGxlcmd5ICYgSW1tdW5vbG9neRhBZHVsdCBJbnBhdGllbnQgTWVkaWNpbmUUQWxsZXJneSAmIEltbXVub2xvZ3kWQWxsZXJneSBhbmQgSW1tdW5vbG9neSdBbmF0b21pYyBQYXRob2xvZ3kgJiBDbGluaWNhbCBQYXRob2xvZ3kOQW5lc3RoZXNpb2xvZ3keQW5naW9ncmFwaHkgJiBJbnRlcnZlbnRpb24gUmFkFUJlaGF2aW9yYWwgUGVkaWF0cmljcwpDYXJkaW9sb2d5FkNhcmRpb3Zhc2N1bGFyIERpc2Vhc2UbQ2VydC5SZWcuIE51cnNlIEFuZXN0aGV0aXN0F0NlcnRpZmllZCBOdXJzZSBNaWR3aWZlHENlcnRpZmllZCBOdXJzZSBQcmFjdGl0aW9uZXIXQ2hpbGQgJiBBZG9sZXNjZW50IFBzeS4fQ2hpbGQgYW5kIEFkb2xlc2NlbnQgUHN5Y2hpYXRyeR1DbGluaWNhbCBCaW9jaGVtaWNhbCBHZW5ldGljcyJDbGluaWNhbCBDYXJkaWFjIEVsZWN0cm9waHlzaW9sb2d5HkNsaW5pY2FsIEdlbmV0aWNzIGFuZCBHZW5vbWljcxRDbGluaWNhbCBJbmZvcm1hdGljcxhDbGluaWNhbCBOZXVyb3BoeXNpb2xvZ3kQQ2xuaWNhbCBHZW5ldGljcxhDb2xvbiBhbmQgUmVjdGFsIFN1cmdlcnkWQ3JpdGljYWwgQ2FyZSBNZWRpY2luZQ1DeXRvcGF0aG9sb2d5C0Rlcm1hdG9sb2d5EERlcm1hdG9wYXRob2xvZ3kjRGV2ZWxvcG1lbnRhbC1CZWhhdmlvcmFsIFBlZGlhdHJpY3MURGlhZ25vc3RpYyBSYWRpb2xvZ3kSRW1lcmdlbmN5IE1lZGljaW5lDUVuZG9jcmlub2xvZ3kmRW5kb2NyaW5vbG9neSwgRGlhYmV0ZXMgYW5kIE1ldGFib2xpc20WRW5kb2NyaW5vbG9neS9EaWFiZXRlcwhFcGlsZXBzeQ9GYW1pbHkgTWVkaWNpbmUxRmVtYWxlIFBlbHZpYyBNZWRpY2luZSBhbmQgUmVjb25zdHJ1Y3RpdmUgU3VyZ2VyeRZGb290IGFuZCBBbmtsZSBTdXJnZXJ5E0ZvcmVuc2ljIFBzeWNoaWF0cnkQR2FzdHJvZW50ZXJvbG9neRlHZW5lcmFsIEludGVybmFsIE1lZGljaW5lD0dlbmVyYWwgU3VyZ2VyeQhHZW5ldGljcxJHZXJpYXRyaWMgTWVkaWNpbmUUR2VyaWF0cmljIFBzeWNoaWF0cnkUR3luZWNvbG9naWMgT25jb2xvZ3kKR3luZWNvbG9neQxIYW5kIFN1cmdlcnkVSGVhZCBhbmQgTmVjayBTdXJnZXJ5CkhlbWF0b2xvZ3kfSG9zcGljZSBhbmQgUGFsbGlhdGl2ZSBNZWRpY2luZRlJLk0uIC0gUHVsbW9uYXJ5IERpc2Vhc2VzCUlDVSBDb3ZlchJJbmZlY3Rpb3VzIERpc2Vhc2UcSW50ZXJuYWwgTWVkIC0gQ3JpdGljYWwgQ2FyZRFJbnRlcm5hbCBNZWRpY2luZRlJbnRlcnZlbnRpb25hbCBDYXJkaW9sb2d5GEludGVydmVudGlvbmFsIFJhZGlvbG9neR1MaWMuIEluZGVwLiBDbGluLiBTb2MuIFdvcmtlchdNYXRlcm5hbC9GZXRhbCBNZWRpY2luZRdNYXRlcm5hbC1GZXRhbCBNZWRpY2luZRBNZWRpY2FsIE9uY29sb2d5Ek1lZGljYWwgVG94aWNvbG9neQhNZWRpY2luZRtOZW9uYXRhbC1QZXJpbmF0YWwgTWVkaWNpbmULTmVvbmF0b2xvZ3kKTmVwaHJvbG9neR9OZXVyb2RldmVsb3BtZW50YWwgRGlzYWJpbGl0aWVzFE5ldXJvbG9naWNhbCBTdXJnZXJ5CU5ldXJvbG9neThOZXVyb2xvZ3kgd2l0aCBTcGVjaWFsIFF1YWxpZmljYXRpb25zIGluIENoaWxkIE5ldXJvbG9neRZOZXVyb211c2N1bGFyIE1lZGljaW5lE05ldXJvcGh5c2lvIE1vbml0b3IOTmV1cm9yYWRpb2xvZ3kMTmV1cm9zdXJnZXJ5EE51Y2xlYXIgTWVkaWNpbmURTnVjbGVhciBSYWRpb2xvZ3kTTnVyc2UgUHJhY3RpdGlvbmVycwdOdXJzaW5nF09ic3RldHJpY3MgLSBHeW5lY29sb2d5F09ic3RldHJpY3MgJiBHeW5lY29sb2d5FU9jY3VwYXRpb25hbCBNZWRpY2luZRNPbmNvbG9neS9IZW1hdG9sb2d5DU9waHRoYWxtb2xvZ3kaT3JhbCAmIE1heGlsbG9mYWNpYWwgU3VyZy4cT3JhbCAmIE1heGlsbG9mYWNpYWwgU3VyZ2VyeRtPcnRob3BhZWRpYyBTcG9ydHMgTWVkaWNpbmUTT3J0aG9wYWVkaWMgU3VyZ2VyeQxPcnRob3BhZWRpY3MOT3RvbGFyeW5nb2xvZ3kPUGFpbiBNYW5hZ2VtZW50DVBhaW4gTWVkaWNpbmUeUGFpbiBNZWRpY2luZSAtIEFuZXN0aGVzaW9sb2d5FFBhaW4gTWVkaWNpbmUgLSBQTSZSD1BhbGxpYXRpdmUgQ2FyZQlQYXRob2xvZ3kZUGF0aG9sb2d5IFJlY2VydGlmaWNhdGlvbhJQYXRob2xvZ3ktQW5hdG9taWMUUGF0aG9sb2d5LUhlbWF0b2xvZ3kUUGVkaSAmIEFkdWx0IEFsbGVyZ3kZUEVESS4gSEVNQVRPTE9HWS1PTkNPTE9HWRFQZWRpYXRyaWMgQWxsZXJneSBQZWRpYXRyaWMgQWxsZXJneSBhbmQgSW1tdW5vbG9neRhQZWRpYXRyaWMgQW5lc3RoZXNpb2xvZ3kUUGVkaWF0cmljIENhcmRpb2xvZ3kgUGVkaWF0cmljIENyaXRpY2FsIENhcmUgTWVkaWNpbmUVUGVkaWF0cmljIERlcm1hdG9sb2d5E1BlZGlhdHJpYyBFbWVyZ2VuY3kcUGVkaWF0cmljIEVtZXJnZW5jeSBNZWRpY2luZRdQZWRpYXRyaWMgRW5kb2NyaW5vbG9neRpQZWRpYXRyaWMgR2FzdHJvZW50ZXJvbG9neR1QZWRpYXRyaWMgSGVtYXRvbG9neS9PbmNvbG9neR1QZWRpYXRyaWMgSGVtYXRvbG9neS1PbmNvbG9neRVQZWRpYXRyaWMgSG9zcGl0YWxpc3QcUGVkaWF0cmljIEluZmVjdGlvdXMgRGlzZWFzZR1QZWRpYXRyaWMgSW5mZWN0aW91cyBEaXNlYXNlcxRQZWRpYXRyaWMgTmVwaHJvbG9neRNQZWRpYXRyaWMgTmV1cm9sb2d5F1BlZGlhdHJpYyBPcGh0aGFsbW9sb2d5FlBlZGlhdHJpYyBPcnRob3BhZWRpY3MYUGVkaWF0cmljIE90b2xhcnluZ29sb2d5FVBlZGlhdHJpYyBQdWxtb25vbG9neRNQZWRpYXRyaWMgUmFkaW9sb2d5FlBlZGlhdHJpYyBSaGV1bWF0b2xvZ3kRUGVkaWF0cmljIFN1cmdlcnkRUGVkaWF0cmljIFVyb2xvZ3kKUGVkaWF0cmljcx5QZWRpYXRyaWNzIEhlbWF0b2xvZ3kvT25jb2xvZ3keUGVkaWF0cmljcy9BZG9sZXNjZW50IE1lZGljaW5lE1BlZGlhdHJpY3MvR2VuZXRpY3MKUGhhcm1hY2lzdBZQaHlzaWNhbCBNZWQuICYgUmVoYWIuGVBoeXNpY2FsIE1lZGljaW5lICYgUmVoYWIiUGh5c2ljYWwgTWVkaWNpbmUgJiBSZWhhYmlsaXRhdGlvbiRQaHlzaWNhbCBNZWRpY2luZSBhbmQgUmVoYWJpbGl0YXRpb24TUGh5c2ljaWFuIEFzc2lzdGFudA9QbGFzdGljIFN1cmdlcnkIUG9kaWF0cnkMUHJpbWFyeSBDYXJlDlByb3N0aG9kb250aWNzClBzeWNoaWF0cnkWUHN5Y2hpYXRyeSAmIE5ldXJvbG9neQpQc3ljaG9sb2d5K1B1YmxpYyBIZWFsdGggJiBHZW5lcmFsIFByZXZlbnRpdmUgTWVkaWNpbmUtUHVibGljIEhlYWx0aCBhbmQgR2VuZXJhbCBQcmV2ZW50aXZlIE1lZGljaW5lEVB1bG1vbmFyeSBEaXNlYXNlElJhZGlhdGlvbiBPbmNvbG9neQlSYWRpb2xvZ3kTUmFkaW9sb2d5IEFzc2lzdGFudBpSZXByb2R1Y3RpdmUgRW5kb2NyaW5vbG9neSZSZXByb2R1Y3RpdmUgRW5kb2NyaW5vbG9neS9JbmZlcnRpbGl0eQxSaGV1bWF0b2xvZ3kOU2xlZXAgTWVkaWNpbmUFU3BpbmUPU3BvcnRzIE1lZGljaW5lB1N1cmdlcnkTU3VyZ2VyeSBvZiB0aGUgSGFuZBZTdXJnaWNhbCBDcml0aWNhbCBDYXJlEVN1cmdpY2FsIE9uY29sb2d5DFRlbGVtZWRpY2luZRVUSEVSQVBFVVRJQyBSQURJT0xPR1kcVGhvcmFjaWMgYW5kIENhcmRpYWMgU3VyZ2VyeRBUaG9yYWNpYyBTdXJnZXJ5ElVyZ2VudCBDYXJlIENlbnRlcg1Vcm9neW5lY29sb2d5B1Vyb2xvZ3klVmFzY3VsYXIgYW5kIEludGVydmVudGlvbmFsIFJhZGlvbG9neRFWYXNjdWxhciBNZWRpY2luZRJWYXNjdWxhciBOZXVyb2xvZ3kQVmFzY3VsYXIgU3VyZ2VyeQpXb3VuZCBDYXJlFCsDrQFnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZxYBZmQCHw9kFgQCAQ8WAh4FVmFsdWUFAi0xZAIlD2QWAmYPZBYCAgEPZBYCAgMPZBYCAgEPZBYCAgMPD2QPEBYBZhYBFgIfBWQWAQIDZGQCDw9kFgQCBQ9kFgICAQ8WAh8DAgEWAmYPZBYCAgEPFgIfAQWPDzxkaXYgY2xhc3M9ImxpbmtzIj4NCjxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQo8ZGl2IGNsYXNzPSJyb3ciPg0KPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS02IGNvbC1tZC00Ij4NCjxoMz5FeHBsb3JlPC9oMz4NCg0KPHVsPg0KCTxsaT48YSBocmVmPSIvQ29udGVudFBhZ2UuYXNweD9uZD04NDciPkZpbmQgYSBEb2N0b3I8L2E+PC9saT4NCgk8bGk+PGEgaHJlZj0iL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NDMiPk1lZGljYWwgU2VydmljZXM8L2E+PC9saT4NCgk8bGk+PGEgaHJlZj0iL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NjEyIj5Mb2NhdGlvbnM8L2E+PC9saT4NCgk8bGk+PGEgaHJlZj0iL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NjI0Ij5QYXRpZW50cyAmYW1wOyBWaXNpdG9yczwvYT48L2xpPg0KCTxsaT48YSBocmVmPSIvQ29udGVudFBhZ2UuYXNweD9uZD02OTIiPkNsYXNzZXMgJmFtcDsgUmVzb3VyY2VzPC9hPjwvbGk+DQo8L3VsPg0KPC9kaXY+DQoNCjxkaXYgY2xhc3M9ImNvbC14cy0xMiBjb2wtc20tNiBjb2wtbWQtNCI+DQo8aDM+U29jaWFsPC9oMz4NCg0KPHVsPg0KCTxsaT48YSBocmVmPSJodHRwczovL3d3dy5mYWNlYm9vay5jb20vTmV3dG9uV2VsbGVzbGV5SG9zcGl0YWwiPkZhY2Vib29rPC9hPjwvbGk+DQoJPGxpPjxhIGhyZWY9Imh0dHBzOi8vdHdpdHRlci5jb20vbmV3dG9ud2VsbGVzbGV5Ij5Ud2l0dGVyPC9hPjwvbGk+DQoJPGxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvTmV3dG9uV2VsbGVzbGV5Ij5Zb3VUdWJlPC9hPjwvbGk+DQoJPGxpPjxhIGhyZWY9Ii9Db250ZW50UGFnZS5hc3B4P25kPTg3OSI+ZU5ld3NsZXR0ZXI8L2E+PC9saT4NCjwvdWw+DQo8L2Rpdj4NCg0KPGRpdiBjbGFzcz0iY29sLXhzLTEyIGNvbC1zbS0xMiBjb2wtbWQtNCI+DQo8ZGl2PjxpbWcgY2xhc3M9ImxvZ28tZm9vdGVyIiBzcmM9Il9pbWcvbG9nb19yZXZlcnNlLnBuZyIgLz4NCjxkaXYgY2xhc3M9ImFkZHJlc3MiPg0KPHA+TmV3dG9uLVdlbGxlc2xleSBIb3NwaXRhbDwvcD4NCg0KPHA+MjAxNCBXYXNoaW5ndG9uIFN0cmVldDwvcD4NCg0KPHA+TmV3dG9uLCBNQSAwMjQ2MjwvcD4NCg0KPHA+NjE3LTI0My02MDAwPC9wPg0KPC9kaXY+DQoNCjxkaXYgY2xhc3M9InNvY2lhbC1tZWRpYSI+PGEgY2xhc3M9ImJ0biBidG4tZGVmYXVsdCIgaHJlZj0iL0NvbnRlbnRQYWdlLmFzcHg/bmQ9ODc0Ij5Ecml2aW5nIERpcmVjdGlvbnM8L2E+PC9kaXY+DQo8L2Rpdj4NCjwvZGl2Pg0KPC9kaXY+DQo8L2Rpdj4NCjwvZGl2Pg0KDQo8ZGl2IGNsYXNzPSJmb290ZXItZW5kIj4NCjxkaXYgY2xhc3M9Im5hdmJhciBmb290ZXItZ2xvYmFsLW5hdiI+DQo8ZGl2IGNsYXNzPSJjb250YWluZXIiPg0KPGRpdiBjbGFzcz0icm93Ij4NCjxkaXYgY2xhc3M9ImNvbC1zbS0xMiI+DQo8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4NCgk8bGkgc3R5bGU9ImJhY2tncm91bmQ6IzExMWEyMDsiPjxhIGhyZWY9IiMiPjxpbWcgc3JjPSJfaW1nL3BhcnRuZXJzLnBuZyIgLz48L2E+PC9saT4NCgk8bGkgc3R5bGU9ImJhY2tncm91bmQ6IzExMWEyMDsiPjxhIGhyZWY9IiMiPldlYnNpdGUgRGlzY2xhaW1lcjwvYT48L2xpPg0KCTxsaSBzdHlsZT0iYmFja2dyb3VuZDojMTExYTIwOyI+PGEgaHJlZj0iL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NzQ1Ij5XZWJzaXRlIFByaXZhY3k8L2E+PC9saT4NCgk8bGkgc3R5bGU9ImJhY2tncm91bmQ6IzExMWEyMDsiPjxhIGhyZWY9Ii9Db250ZW50UGFnZS5hc3B4P25kPTc0NiI+SElQQUEgR3VpZGVsaW5lczwvYT48L2xpPg0KCTxsaSBzdHlsZT0iYmFja2dyb3VuZDojMTExYTIwOyI+PGEgaHJlZj0iL0NvbnRlbnRQYWdlLmFzcHg/bmQ9NzQ0Ij5MZWdhbCBTdGF0ZW1lbnRzPC9hPjwvbGk+DQo8L3VsPg0KPC9kaXY+DQo8L2Rpdj4NCjwvZGl2Pg0KPC9kaXY+DQo8L2Rpdj4NCmQCBw8PZA8QFgFmFgEWAh8FZBYBAgNkZBgBBSRjdGwwMCRjcGhDb250ZW50JGN0bDAxJFRhYkNvbnRhaW5lcjEPD2RmZGLTenM630uqRiFf0v5nDyW1NhEnjlZOW3mi5rvJ1ao5'
        yield FormRequest(url, method='POST',
                          formdata={'ctl00$cphContent$ctl01$ddlResultsPerPage': '99999', '__VIEWSTATE': viewstate},
                          callback=self.generator_viewprofile_request)

    def generator_viewprofile_request(self, response):
        extract_vars = ExtractVarFromInfo()
        doctor_ids = response.css('div.search-results-physician input::attr(value)').extract()
        doctor_ids = extract_vars.remove_viewprofile_string(doctor_ids)
        doctor_ids_keys = response.css('div.search-results-physician input::attr(id)').extract()
        physicianid_keys = extract_vars.get_formdata_keys(doctor_ids_keys, 0)
        viewprofile_keys = extract_vars.get_formdata_keys(doctor_ids_keys, 1)
        doctor_names = response.css('a h1.h1name::text').extract()
        name_generator = FormNameForDoctorProfile()
        doctor_item_former = FormDoctorProfileItems()
        for index in range(0, len(doctor_names)):
            name = name_generator.get_doctor_name_for_url(str(doctor_names[index]))
            id = (doctor_ids[index])
            physicianid_key = physicianid_keys[index]
            viewprofile_key = viewprofile_keys[index]
            url = 'https://www.nwh.org/find-a-doctor/find-a-doctor-profile/' + name
            #yield FormRequest(url, method='POST', formdata={physicianid_key: id, viewprofile_key: 'View Full Profile'}, callback=doctor_item_former.extract_doctor_profile_info)


class ExtractVarFromInfo():

    def remove_viewprofile_string(self, ids):
        while True:
            try:
                ids.remove(u'View Full Profile')
            except:
                break
        return ids

    def get_formdata_keys(self, doctor_ids_keys, index):
        formdata_keys = []
        for key in range(index,len(doctor_ids_keys),2):
            formdata_keys.append(str(doctor_ids_keys[key]))
        return formdata_keys


class FormNameForDoctorProfile():

    def get_doctor_name_for_url(self, name):
        first_mid_last_name = name.split(',')
        if len(first_mid_last_name) == 3:
            if first_mid_last_name[2] != ' MD':
                if '.' in first_mid_last_name[1]:
                    mid_first_last_name = self.form_name_with_four_words(first_mid_last_name)
                    mid_first_last_name.replace(' ', '-')
                    mid_first_last_name ='{0},{1}'.format(mid_first_last_name,first_mid_last_name[2])
                    return self.add_dashes_and_lowercase_name(mid_first_last_name)
                else:
                    return self.remove_space_from_mid_name(first_mid_last_name)
            else:
                return self.remove_space_from_mid_name(first_mid_last_name)
        else:
            mid_first_last_name = self.form_name_with_four_words(first_mid_last_name)
            return self.add_dashes_and_lowercase_name(mid_first_last_name)

    def form_name_with_four_words(self, first_mid_last_name):
        mid_last_name = first_mid_last_name[1].split('.')
        break_mid_name = mid_last_name[0].split(' ')
        mid_first_last_name = '{0} {1} {2}{3}'.format(break_mid_name[1], first_mid_last_name[0],
                                                      break_mid_name[2], mid_last_name[1])
        return mid_first_last_name

    def remove_extra_space(self, name):
        name.remove(' ')
        name = "".join(name)
        return name

    def add_dashes_and_lowercase_name(self, name):
        return name.replace(' ', '-').lower()

    def form_name_with_three_words(self, first_name, mid_name, last_name):
        return '{0}-{1}-{2}'.format(first_name, mid_name, last_name).lower()

    def remove_space_from_mid_name(self, first_mid_last_name):
        last_name = list(first_mid_last_name[2])
        last_name = self.remove_extra_space(last_name)
        mid_name = first_mid_last_name[1]
        if mid_name[0] == ' ':
            mid_name = list(mid_name)
            mid_name = self.remove_extra_space(mid_name)
            return self.form_name_with_three_words(mid_name, first_mid_last_name[0], last_name)
        else:
            return self.form_name_with_three_words(first_mid_last[1], first_mid_last_name[0], last_name)


class FormDoctorProfileItems():

    def get_graduation_info(self, response):
        graduate_education = []
        residency = {'type': 'Residency',
                    'name': response.css('div#ctl00_cphContent_ctl01_pnlResidency li::text').extract()}
        fellowship = {'type': 'Fellowship',
                    'name': response.css('div#ctl00_cphContent_ctl01_pnlFellowship li::text').extract()}
        graduate_education.append(residency)
        graduate_education.append(fellowship)
        return graduate_education

    def get_address_info(self, response):
        phone = response.css('span#ctl00_cphContent_ctl01_lblDocContactPhone::text').extract_first()
        fax = response.css('span#ctl00_cphContent_ctl01_lblDocContactFax::text').extract_first()
        other = response.css('div.doctor-contact-location-address a::text').extract()
        address = {'phone':phone, 'fax':fax, 'other':other}
        return address

    def extract_doctor_profile_info(self, response):
        l = ItemLoader(item=FindadoctorItem(), response=response)
        l.add_value('crawled_date', str(datetime.now()))
        l.add_value('source_url', response.url)
        l.add_css('speciality', 'div#ctl00_cphContent_ctl01_pnlDocSpecialty h2::text')
        l.add_css('image_url', 'div#ctl00_cphContent_ctl01_pnlDoctorImage img::attr(src)')
        l.add_css('full_name', 'div#ctl00_cphContent_ctl01_pnlDocName h1::text')
        address = self.get_address_info(response)
        l.add_value('address', address)
        l.add_css('medical_school', 'div#ctl00_cphContent_ctl01_pnlMedicalSchool li::text')
        affiliation = {'name': response.css('div#ctl00_cphContent_ctl01_pnlInternship li::text').extract()}
        l.add_value('affiliation', affiliation)
        graduate_education = self.get_graduation_info(response)
        l.add_value('graduate_education', graduate_education)
        return l.load_item()